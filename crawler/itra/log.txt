2019-12-20 15:13:27 [root] ERROR: Error RACE:, reqb'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2! // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 140683640133968,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "J8Ix9c8yqMv8LeUqVPy3";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ultra_predictor.races.models.MultipleObjectsReturned</h1>\n<div class="detail">\n  <p class="errormsg">ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  \n  <ul><li><div class="frame" id="frame-140683640119440">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py"</cite>,\n      line <em class="line">65</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>return response_for_exception(request, e)</pre>\n<pre class="line before"><span class="ws">        </span>return super().get_response(request)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>if not self._should_handle(get_path_info(environ)):</pre>\n<pre class="line current"><span class="ws">            </span>return self.application(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>return super().__call__(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640119504">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py"</cite>,\n      line <em class="line">141</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>set_script_prefix(get_script_name(environ))</pre>\n<pre class="line before"><span class="ws">        </span>signals.request_started.send(sender=self.__class__, environ=environ)</pre>\n<pre class="line before"><span class="ws">        </span>request = self.request_class(environ)</pre>\n<pre class="line current"><span class="ws">        </span>response = self.get_response(request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response._handler_class = self.__class__</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>status = \'%d %s\' % (response.status_code, response.reason_phrase)</pre>\n<pre class="line after"><span class="ws">        </span>response_headers = [</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640119696">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">75</em>,\n      in <code class="function">get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def get_response(self, request):</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Return an HttpResponse object for the given HttpRequest.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">        </span># Setup default url resolver for this thread</pre>\n<pre class="line before"><span class="ws">        </span>set_urlconf(settings.ROOT_URLCONF)</pre>\n<pre class="line current"><span class="ws">        </span>response = self._middleware_chain(request)</pre>\n<pre class="line after"><span class="ws">        </span>response._closable_objects.append(request)</pre>\n<pre class="line after"><span class="ws">        </span>if response.status_code &gt;= 400:</pre>\n<pre class="line after"><span class="ws">            </span>log_response(</pre>\n<pre class="line after"><span class="ws">                </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">                </span>response=response,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640119376">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">36</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>def response_for_exception(request, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640119888">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">90</em>,\n      in <code class="function">response_for_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span># Allow sys.exit() to actually exit. See tickets #1023 and #4701</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>else:</pre>\n<pre class="line before"><span class="ws">        </span>signals.got_request_exception.send(sender=None, request=request)</pre>\n<pre class="line current"><span class="ws">        </span>response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())</pre>\n<pre class="line after"><span class="ws">        </span>log_response(</pre>\n<pre class="line after"><span class="ws">            </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">            </span>response=response,</pre>\n<pre class="line after"><span class="ws">            </span>request=request,</pre>\n<pre class="line after"><span class="ws">            </span>exc_info=sys.exc_info(),</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640102672">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">125</em>,\n      in <code class="function">handle_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG_PROPAGATE_EXCEPTIONS:</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG:</pre>\n<pre class="line current"><span class="ws">        </span>return debug.technical_500_response(request, *exc_info)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Return an HttpResponse that displays a friendly error message.</pre>\n<pre class="line after"><span class="ws">    </span>callback, param_dict = resolver.resolve_error_handler(500)</pre>\n<pre class="line after"><span class="ws">    </span>return callback(request, **param_dict)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640102736">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">null_technical_500_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>elif tld.wsgi_tb:</pre>\n<pre class="line before"><span class="ws">            </span>tb = tld.wsgi_tb</pre>\n<pre class="line before"><span class="ws">    </span>except AttributeError:</pre>\n<pre class="line before"><span class="ws">        </span>pass</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">    </span>six.reraise(exc_type, exc_value, tb)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640102544">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/six.py"</cite>,\n      line <em class="line">695</em>,\n      in <code class="function">reraise</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>if value is None:</pre>\n<pre class="line before"><span class="ws">                </span>value = tp()</pre>\n<pre class="line before"><span class="ws">            </span>if value.__traceback__ is not tb:</pre>\n<pre class="line current"><span class="ws">                </span>raise value.with_traceback(tb)</pre>\n<pre class="line after"><span class="ws">            </span>raise value</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre>\n<pre class="line after"><span class="ws">            </span>value = None</pre>\n<pre class="line after"><span class="ws">            </span>tb = None</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640062224">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">34</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>can rely on getting a response instead of an exception.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640102608">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">115</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre>\n<pre class="line after"><span class="ws">            </span>if isinstance(callback, types.FunctionType):    # FBV</pre>\n<pre class="line after"><span class="ws">                </span>view_name = callback.__name__</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640062480">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">113</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>break</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line current"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640062736">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/contextlib.py"</cite>,\n      line <em class="line">74</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, func):</pre>\n<pre class="line before"><span class="ws">        </span>@wraps(func)</pre>\n<pre class="line before"><span class="ws">        </span>def inner(*args, **kwds):</pre>\n<pre class="line before"><span class="ws">            </span>with self._recreate_cm():</pre>\n<pre class="line current"><span class="ws">                </span>return func(*args, **kwds)</pre>\n<pre class="line after"><span class="ws">        </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class _GeneratorContextManagerBase:</pre>\n<pre class="line after"><span class="ws">    </span>&quot;&quot;&quot;Shared functionality for @contextmanager and @asynccontextmanager.&quot;&quot;&quot;</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640062032">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py"</cite>,\n      line <em class="line">54</em>,\n      in <code class="function">wrapped_view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span>def csrf_exempt(view_func):</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span># view_func.csrf_exempt = True would also work, but decorators are nicer</pre>\n<pre class="line before"><span class="ws">    </span># if they don\'t have side effects, so return a new function.</pre>\n<pre class="line before"><span class="ws">    </span>def wrapped_view(*args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return view_func(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">    </span>wrapped_view.csrf_exempt = True</pre>\n<pre class="line after"><span class="ws">    </span>return wraps(view_func)(wrapped_view)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640062608">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/generic/base.py"</cite>,\n      line <em class="line">71</em>,\n      in <code class="function">view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>if not hasattr(self, \'request\'):</pre>\n<pre class="line before"><span class="ws">                </span>raise AttributeError(</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;%s instance has no \'request\' attribute. Did you override &quot;</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;setup() and forget to call super()?&quot; % cls.__name__</pre>\n<pre class="line before"><span class="ws">                </span>)</pre>\n<pre class="line current"><span class="ws">            </span>return self.dispatch(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>view.view_class = cls</pre>\n<pre class="line after"><span class="ws">        </span>view.view_initkwargs = initkwargs</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># take name and docstring from class</pre>\n<pre class="line after"><span class="ws">        </span>update_wrapper(view, cls, updated=())</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640062864">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">505</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>return self.response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def options(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640063824">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">465</em>,\n      in <code class="function">handle_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>context = self.get_exception_handler_context()</pre>\n<pre class="line before"><span class="ws">        </span>response = exception_handler(exc, context)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line current"><span class="ws">            </span>self.raise_uncaught_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response.exception = True</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def raise_uncaught_exception(self, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640062544">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">476</em>,\n      in <code class="function">raise_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if settings.DEBUG:</pre>\n<pre class="line before"><span class="ws">            </span>request = self.request</pre>\n<pre class="line before"><span class="ws">            </span>renderer_format = getattr(request.accepted_renderer, \'format\')</pre>\n<pre class="line before"><span class="ws">            </span>use_plaintext_traceback = renderer_format not in (\'html\', \'api\', \'admin\')</pre>\n<pre class="line before"><span class="ws">            </span>request.force_plaintext_errors(use_plaintext_traceback)</pre>\n<pre class="line current"><span class="ws">        </span>raise exc</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Note: Views are made CSRF exempt from within `as_view` as to prevent</pre>\n<pre class="line after"><span class="ws">    </span># accidental removal of this exemption in cases where `dispatch` needs to</pre>\n<pre class="line after"><span class="ws">    </span># be overridden.</pre>\n<pre class="line after"><span class="ws">    </span>def dispatch(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640063504">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">502</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = getattr(self, request.method.lower(),</pre>\n<pre class="line before"><span class="ws">                                  </span>self.http_method_not_allowed)</pre>\n<pre class="line before"><span class="ws">            </span>else:</pre>\n<pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640064144">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/generics.py"</cite>,\n      line <em class="line">242</em>,\n      in <code class="function">post</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def post(self, request, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return self.create(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class RetrieveUpdateAPIView(mixins.RetrieveModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>mixins.UpdateModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>GenericAPIView):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640064336">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py"</cite>,\n      line <em class="line">19</em>,\n      in <code class="function">create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>Create a model instance.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def create(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>serializer = self.get_serializer(data=request.data)</pre>\n<pre class="line before"><span class="ws">        </span>serializer.is_valid(raise_exception=True)</pre>\n<pre class="line current"><span class="ws">        </span>self.perform_create(serializer)</pre>\n<pre class="line after"><span class="ws">        </span>headers = self.get_success_headers(serializer.data)</pre>\n<pre class="line after"><span class="ws">        </span>return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line after"><span class="ws">        </span>serializer.save()</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640063888">\n  <h4>File <cite class="filename">"/app/ultra_predictor/api_races/api.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">perform_create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])</pre>\n<pre class="line after"><span class="ws">            </span>serializer.save(event=event)</pre>\n<pre class="line after"><span class="ws">        </span>except Event.DoesNotExist:</pre>\n<pre class="line after"><span class="ws">            </span>logger.error(f&quot;Event not found: {self.request.data}&quot;)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640062160">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/manager.py"</cite>,\n      line <em class="line">82</em>,\n      in <code class="function">manager_method</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>@classmethod</pre>\n<pre class="line before"><span class="ws">    </span>def _get_queryset_methods(cls, queryset_class):</pre>\n<pre class="line before"><span class="ws">        </span>def create_method(name, method):</pre>\n<pre class="line before"><span class="ws">            </span>def manager_method(self, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">                </span>return getattr(self.get_queryset(), name)(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__name__ = method.__name__</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__doc__ = method.__doc__</pre>\n<pre class="line after"><span class="ws">            </span>return manager_method</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>new_methods = {}</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640063696">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/query.py"</cite>,\n      line <em class="line">412</em>,\n      in <code class="function">get</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>&quot;%s matching query does not exist.&quot; %</pre>\n<pre class="line before"><span class="ws">                </span>self.model._meta.object_name</pre>\n<pre class="line before"><span class="ws">            </span>)</pre>\n<pre class="line before"><span class="ws">        </span>raise self.model.MultipleObjectsReturned(</pre>\n<pre class="line before"><span class="ws">            </span>&quot;get() returned more than one %s -- it returned %s!&quot; %</pre>\n<pre class="line current"><span class="ws">            </span>(self.model._meta.object_name, num)</pre>\n<pre class="line after"><span class="ws">        </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def create(self, **kwargs):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line after"><span class="ws">        </span>Create a new object with the given kwargs, saving it to the database</pre></div>\n</div>\n</ul>\n  <blockquote>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</blockquote>\n</div>\n\n<div class="plain">\n  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">\n    <p>\n      <input type="hidden" name="language" value="pytb">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class="pastemessage">You can also paste this traceback into\n      a <a href="https://gist.github.com/">gist</a>:\n      <input type="submit" value="create paste"></span>\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py&quot;, line 65, in __call__\n    return self.application(environ, start_response)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py&quot;, line 141, in __call__\n    response = self.get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 75, in get_response\n    response = self._middleware_chain(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 36, in inner\n    response = response_for_exception(request, exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File &quot;/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py&quot;, line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/six.py&quot;, line 695, in reraise\n    raise value.with_traceback(tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 34, in inner\n    response = get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File &quot;/usr/local/lib/python3.7/contextlib.py&quot;, line 74, in inner\n    return func(*args, **kwds)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py&quot;, line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/generic/base.py&quot;, line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 505, in dispatch\n    response = self.handle_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 476, in raise_uncaught_exception\n    raise exc\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/generics.py&quot;, line 242, in post\n    return self.create(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py&quot;, line 19, in create\n    self.perform_create(serializer)\n  File &quot;/app/ultra_predictor/api_races/api.py&quot;, line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/manager.py&quot;, line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/query.py&quot;, line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</textarea>\n  </form>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py", line 65, in __call__\n    return self.application(environ, start_response)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py", line 141, in __call__\n    response = self.get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 75, in get_response\n    response = self._middleware_chain(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 36, in inner\n    response = response_for_exception(request, exc)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File "/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py", line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File "/usr/local/lib/python3.7/site-packages/six.py", line 695, in reraise\n    raise value.with_traceback(tb)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner\n    response = get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File "/usr/local/lib/python3.7/contextlib.py", line 74, in inner\n    return func(*args, **kwds)\n  File "/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/views/generic/base.py", line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 505, in dispatch\n    response = self.handle_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 476, in raise_uncaught_exception\n    raise exc\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/generics.py", line 242, in post\n    return self.create(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py", line 19, in create\n    self.perform_create(serializer)\n  File "/app/ultra_predictor/api_races/api.py", line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data["itra_event_id"])\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/manager.py", line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/query.py", line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event - it returned 2!\n\n-->\n', item: {'ascent': '4820',
 'challenge': None,
 'championship': None,
 'city_finish': 'Keswick',
 'city_start': 'Swirls Cark Park, A591',
 'country_finish': 'United Kingdom',
 'country_start': 'United Kingdom',
 'descent': '4950',
 'distance': '73.9',
 'finish_point': '300',
 'itra_event_id': 3,
 'itra_point': '4',
 'itra_race_id': 1470,
 'map_link': 'https://tracedetrail.fr/en/trace/itra/47900',
 'max_time': datetime.timedelta(days=1),
 'mount_point': '8',
 'name': 'Long Course',
 'participation': 'solo',
 'pistes': '1',
 'race_date': '2018-06-23',
 'race_time': '04:00:00',
 'refreshment_points': '5',
 'routes': '1',
 'sentiers': '98'}
2019-12-20 15:13:29 [root] ERROR: Error RACE:, reqb'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2! // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 140683640298448,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "J8Ix9c8yqMv8LeUqVPy3";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ultra_predictor.races.models.MultipleObjectsReturned</h1>\n<div class="detail">\n  <p class="errormsg">ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  \n  <ul><li><div class="frame" id="frame-140683640266320">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py"</cite>,\n      line <em class="line">65</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>return response_for_exception(request, e)</pre>\n<pre class="line before"><span class="ws">        </span>return super().get_response(request)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>if not self._should_handle(get_path_info(environ)):</pre>\n<pre class="line current"><span class="ws">            </span>return self.application(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>return super().__call__(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640372048">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py"</cite>,\n      line <em class="line">141</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>set_script_prefix(get_script_name(environ))</pre>\n<pre class="line before"><span class="ws">        </span>signals.request_started.send(sender=self.__class__, environ=environ)</pre>\n<pre class="line before"><span class="ws">        </span>request = self.request_class(environ)</pre>\n<pre class="line current"><span class="ws">        </span>response = self.get_response(request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response._handler_class = self.__class__</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>status = \'%d %s\' % (response.status_code, response.reason_phrase)</pre>\n<pre class="line after"><span class="ws">        </span>response_headers = [</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640266384">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">75</em>,\n      in <code class="function">get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def get_response(self, request):</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Return an HttpResponse object for the given HttpRequest.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">        </span># Setup default url resolver for this thread</pre>\n<pre class="line before"><span class="ws">        </span>set_urlconf(settings.ROOT_URLCONF)</pre>\n<pre class="line current"><span class="ws">        </span>response = self._middleware_chain(request)</pre>\n<pre class="line after"><span class="ws">        </span>response._closable_objects.append(request)</pre>\n<pre class="line after"><span class="ws">        </span>if response.status_code &gt;= 400:</pre>\n<pre class="line after"><span class="ws">            </span>log_response(</pre>\n<pre class="line after"><span class="ws">                </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">                </span>response=response,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640266448">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">36</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>def response_for_exception(request, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640266512">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">90</em>,\n      in <code class="function">response_for_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span># Allow sys.exit() to actually exit. See tickets #1023 and #4701</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>else:</pre>\n<pre class="line before"><span class="ws">        </span>signals.got_request_exception.send(sender=None, request=request)</pre>\n<pre class="line current"><span class="ws">        </span>response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())</pre>\n<pre class="line after"><span class="ws">        </span>log_response(</pre>\n<pre class="line after"><span class="ws">            </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">            </span>response=response,</pre>\n<pre class="line after"><span class="ws">            </span>request=request,</pre>\n<pre class="line after"><span class="ws">            </span>exc_info=sys.exc_info(),</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640266256">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">125</em>,\n      in <code class="function">handle_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG_PROPAGATE_EXCEPTIONS:</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG:</pre>\n<pre class="line current"><span class="ws">        </span>return debug.technical_500_response(request, *exc_info)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Return an HttpResponse that displays a friendly error message.</pre>\n<pre class="line after"><span class="ws">    </span>callback, param_dict = resolver.resolve_error_handler(500)</pre>\n<pre class="line after"><span class="ws">    </span>return callback(request, **param_dict)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640387984">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">null_technical_500_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>elif tld.wsgi_tb:</pre>\n<pre class="line before"><span class="ws">            </span>tb = tld.wsgi_tb</pre>\n<pre class="line before"><span class="ws">    </span>except AttributeError:</pre>\n<pre class="line before"><span class="ws">        </span>pass</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">    </span>six.reraise(exc_type, exc_value, tb)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640386128">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/six.py"</cite>,\n      line <em class="line">695</em>,\n      in <code class="function">reraise</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>if value is None:</pre>\n<pre class="line before"><span class="ws">                </span>value = tp()</pre>\n<pre class="line before"><span class="ws">            </span>if value.__traceback__ is not tb:</pre>\n<pre class="line current"><span class="ws">                </span>raise value.with_traceback(tb)</pre>\n<pre class="line after"><span class="ws">            </span>raise value</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre>\n<pre class="line after"><span class="ws">            </span>value = None</pre>\n<pre class="line after"><span class="ws">            </span>tb = None</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640386512">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">34</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>can rely on getting a response instead of an exception.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640266640">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">115</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre>\n<pre class="line after"><span class="ws">            </span>if isinstance(callback, types.FunctionType):    # FBV</pre>\n<pre class="line after"><span class="ws">                </span>view_name = callback.__name__</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640389200">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">113</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>break</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line current"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640388496">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/contextlib.py"</cite>,\n      line <em class="line">74</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, func):</pre>\n<pre class="line before"><span class="ws">        </span>@wraps(func)</pre>\n<pre class="line before"><span class="ws">        </span>def inner(*args, **kwds):</pre>\n<pre class="line before"><span class="ws">            </span>with self._recreate_cm():</pre>\n<pre class="line current"><span class="ws">                </span>return func(*args, **kwds)</pre>\n<pre class="line after"><span class="ws">        </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class _GeneratorContextManagerBase:</pre>\n<pre class="line after"><span class="ws">    </span>&quot;&quot;&quot;Shared functionality for @contextmanager and @asynccontextmanager.&quot;&quot;&quot;</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640387856">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py"</cite>,\n      line <em class="line">54</em>,\n      in <code class="function">wrapped_view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span>def csrf_exempt(view_func):</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span># view_func.csrf_exempt = True would also work, but decorators are nicer</pre>\n<pre class="line before"><span class="ws">    </span># if they don\'t have side effects, so return a new function.</pre>\n<pre class="line before"><span class="ws">    </span>def wrapped_view(*args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return view_func(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">    </span>wrapped_view.csrf_exempt = True</pre>\n<pre class="line after"><span class="ws">    </span>return wraps(view_func)(wrapped_view)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640386896">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/generic/base.py"</cite>,\n      line <em class="line">71</em>,\n      in <code class="function">view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>if not hasattr(self, \'request\'):</pre>\n<pre class="line before"><span class="ws">                </span>raise AttributeError(</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;%s instance has no \'request\' attribute. Did you override &quot;</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;setup() and forget to call super()?&quot; % cls.__name__</pre>\n<pre class="line before"><span class="ws">                </span>)</pre>\n<pre class="line current"><span class="ws">            </span>return self.dispatch(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>view.view_class = cls</pre>\n<pre class="line after"><span class="ws">        </span>view.view_initkwargs = initkwargs</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># take name and docstring from class</pre>\n<pre class="line after"><span class="ws">        </span>update_wrapper(view, cls, updated=())</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640385744">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">505</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>return self.response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def options(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640387280">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">465</em>,\n      in <code class="function">handle_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>context = self.get_exception_handler_context()</pre>\n<pre class="line before"><span class="ws">        </span>response = exception_handler(exc, context)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line current"><span class="ws">            </span>self.raise_uncaught_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response.exception = True</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def raise_uncaught_exception(self, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640388304">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">476</em>,\n      in <code class="function">raise_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if settings.DEBUG:</pre>\n<pre class="line before"><span class="ws">            </span>request = self.request</pre>\n<pre class="line before"><span class="ws">            </span>renderer_format = getattr(request.accepted_renderer, \'format\')</pre>\n<pre class="line before"><span class="ws">            </span>use_plaintext_traceback = renderer_format not in (\'html\', \'api\', \'admin\')</pre>\n<pre class="line before"><span class="ws">            </span>request.force_plaintext_errors(use_plaintext_traceback)</pre>\n<pre class="line current"><span class="ws">        </span>raise exc</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Note: Views are made CSRF exempt from within `as_view` as to prevent</pre>\n<pre class="line after"><span class="ws">    </span># accidental removal of this exemption in cases where `dispatch` needs to</pre>\n<pre class="line after"><span class="ws">    </span># be overridden.</pre>\n<pre class="line after"><span class="ws">    </span>def dispatch(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640389136">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">502</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = getattr(self, request.method.lower(),</pre>\n<pre class="line before"><span class="ws">                                  </span>self.http_method_not_allowed)</pre>\n<pre class="line before"><span class="ws">            </span>else:</pre>\n<pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640385616">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/generics.py"</cite>,\n      line <em class="line">242</em>,\n      in <code class="function">post</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def post(self, request, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return self.create(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class RetrieveUpdateAPIView(mixins.RetrieveModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>mixins.UpdateModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>GenericAPIView):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640385872">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py"</cite>,\n      line <em class="line">19</em>,\n      in <code class="function">create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>Create a model instance.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def create(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>serializer = self.get_serializer(data=request.data)</pre>\n<pre class="line before"><span class="ws">        </span>serializer.is_valid(raise_exception=True)</pre>\n<pre class="line current"><span class="ws">        </span>self.perform_create(serializer)</pre>\n<pre class="line after"><span class="ws">        </span>headers = self.get_success_headers(serializer.data)</pre>\n<pre class="line after"><span class="ws">        </span>return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line after"><span class="ws">        </span>serializer.save()</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640389328">\n  <h4>File <cite class="filename">"/app/ultra_predictor/api_races/api.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">perform_create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])</pre>\n<pre class="line after"><span class="ws">            </span>serializer.save(event=event)</pre>\n<pre class="line after"><span class="ws">        </span>except Event.DoesNotExist:</pre>\n<pre class="line after"><span class="ws">            </span>logger.error(f&quot;Event not found: {self.request.data}&quot;)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640385936">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/manager.py"</cite>,\n      line <em class="line">82</em>,\n      in <code class="function">manager_method</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>@classmethod</pre>\n<pre class="line before"><span class="ws">    </span>def _get_queryset_methods(cls, queryset_class):</pre>\n<pre class="line before"><span class="ws">        </span>def create_method(name, method):</pre>\n<pre class="line before"><span class="ws">            </span>def manager_method(self, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">                </span>return getattr(self.get_queryset(), name)(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__name__ = method.__name__</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__doc__ = method.__doc__</pre>\n<pre class="line after"><span class="ws">            </span>return manager_method</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>new_methods = {}</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640388624">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/query.py"</cite>,\n      line <em class="line">412</em>,\n      in <code class="function">get</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>&quot;%s matching query does not exist.&quot; %</pre>\n<pre class="line before"><span class="ws">                </span>self.model._meta.object_name</pre>\n<pre class="line before"><span class="ws">            </span>)</pre>\n<pre class="line before"><span class="ws">        </span>raise self.model.MultipleObjectsReturned(</pre>\n<pre class="line before"><span class="ws">            </span>&quot;get() returned more than one %s -- it returned %s!&quot; %</pre>\n<pre class="line current"><span class="ws">            </span>(self.model._meta.object_name, num)</pre>\n<pre class="line after"><span class="ws">        </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def create(self, **kwargs):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line after"><span class="ws">        </span>Create a new object with the given kwargs, saving it to the database</pre></div>\n</div>\n</ul>\n  <blockquote>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</blockquote>\n</div>\n\n<div class="plain">\n  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">\n    <p>\n      <input type="hidden" name="language" value="pytb">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class="pastemessage">You can also paste this traceback into\n      a <a href="https://gist.github.com/">gist</a>:\n      <input type="submit" value="create paste"></span>\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py&quot;, line 65, in __call__\n    return self.application(environ, start_response)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py&quot;, line 141, in __call__\n    response = self.get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 75, in get_response\n    response = self._middleware_chain(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 36, in inner\n    response = response_for_exception(request, exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File &quot;/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py&quot;, line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/six.py&quot;, line 695, in reraise\n    raise value.with_traceback(tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 34, in inner\n    response = get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File &quot;/usr/local/lib/python3.7/contextlib.py&quot;, line 74, in inner\n    return func(*args, **kwds)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py&quot;, line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/generic/base.py&quot;, line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 505, in dispatch\n    response = self.handle_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 476, in raise_uncaught_exception\n    raise exc\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/generics.py&quot;, line 242, in post\n    return self.create(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py&quot;, line 19, in create\n    self.perform_create(serializer)\n  File &quot;/app/ultra_predictor/api_races/api.py&quot;, line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/manager.py&quot;, line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/query.py&quot;, line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</textarea>\n  </form>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py", line 65, in __call__\n    return self.application(environ, start_response)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py", line 141, in __call__\n    response = self.get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 75, in get_response\n    response = self._middleware_chain(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 36, in inner\n    response = response_for_exception(request, exc)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File "/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py", line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File "/usr/local/lib/python3.7/site-packages/six.py", line 695, in reraise\n    raise value.with_traceback(tb)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner\n    response = get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File "/usr/local/lib/python3.7/contextlib.py", line 74, in inner\n    return func(*args, **kwds)\n  File "/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/views/generic/base.py", line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 505, in dispatch\n    response = self.handle_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 476, in raise_uncaught_exception\n    raise exc\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/generics.py", line 242, in post\n    return self.create(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py", line 19, in create\n    self.perform_create(serializer)\n  File "/app/ultra_predictor/api_races/api.py", line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data["itra_event_id"])\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/manager.py", line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/query.py", line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event - it returned 2!\n\n-->\n', item: {'ascent': '1170',
 'challenge': None,
 'championship': None,
 'city_finish': 'Umag',
 'city_start': 'Motovun',
 'country_finish': 'Croatia',
 'country_start': 'Croatia',
 'descent': '1320',
 'distance': '41.1',
 'finish_point': '300',
 'itra_event_id': 7,
 'itra_point': '2',
 'itra_race_id': 4017,
 'map_link': 'https://tracedetrail.fr/en/trace/itra/41116',
 'max_time': datetime.timedelta(seconds=28800),
 'mount_point': '3',
 'name': 'Yellow',
 'participation': 'solo',
 'pistes': '45',
 'race_date': '2018-04-07',
 'race_time': '12:00:00',
 'refreshment_points': '3',
 'routes': '10',
 'sentiers': '45'}
2019-12-20 15:13:30 [root] ERROR: Error RACE:, reqb'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2! // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 140683657258768,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "J8Ix9c8yqMv8LeUqVPy3";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ultra_predictor.races.models.MultipleObjectsReturned</h1>\n<div class="detail">\n  <p class="errormsg">ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  \n  <ul><li><div class="frame" id="frame-140683657258704">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py"</cite>,\n      line <em class="line">65</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>return response_for_exception(request, e)</pre>\n<pre class="line before"><span class="ws">        </span>return super().get_response(request)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>if not self._should_handle(get_path_info(environ)):</pre>\n<pre class="line current"><span class="ws">            </span>return self.application(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>return super().__call__(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683657258832">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py"</cite>,\n      line <em class="line">141</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>set_script_prefix(get_script_name(environ))</pre>\n<pre class="line before"><span class="ws">        </span>signals.request_started.send(sender=self.__class__, environ=environ)</pre>\n<pre class="line before"><span class="ws">        </span>request = self.request_class(environ)</pre>\n<pre class="line current"><span class="ws">        </span>response = self.get_response(request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response._handler_class = self.__class__</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>status = \'%d %s\' % (response.status_code, response.reason_phrase)</pre>\n<pre class="line after"><span class="ws">        </span>response_headers = [</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683640386384">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">75</em>,\n      in <code class="function">get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def get_response(self, request):</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Return an HttpResponse object for the given HttpRequest.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">        </span># Setup default url resolver for this thread</pre>\n<pre class="line before"><span class="ws">        </span>set_urlconf(settings.ROOT_URLCONF)</pre>\n<pre class="line current"><span class="ws">        </span>response = self._middleware_chain(request)</pre>\n<pre class="line after"><span class="ws">        </span>response._closable_objects.append(request)</pre>\n<pre class="line after"><span class="ws">        </span>if response.status_code &gt;= 400:</pre>\n<pre class="line after"><span class="ws">            </span>log_response(</pre>\n<pre class="line after"><span class="ws">                </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">                </span>response=response,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683657259024">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">36</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>def response_for_exception(request, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683657260304">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">90</em>,\n      in <code class="function">response_for_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span># Allow sys.exit() to actually exit. See tickets #1023 and #4701</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>else:</pre>\n<pre class="line before"><span class="ws">        </span>signals.got_request_exception.send(sender=None, request=request)</pre>\n<pre class="line current"><span class="ws">        </span>response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())</pre>\n<pre class="line after"><span class="ws">        </span>log_response(</pre>\n<pre class="line after"><span class="ws">            </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">            </span>response=response,</pre>\n<pre class="line after"><span class="ws">            </span>request=request,</pre>\n<pre class="line after"><span class="ws">            </span>exc_info=sys.exc_info(),</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683657257808">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">125</em>,\n      in <code class="function">handle_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG_PROPAGATE_EXCEPTIONS:</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG:</pre>\n<pre class="line current"><span class="ws">        </span>return debug.technical_500_response(request, *exc_info)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Return an HttpResponse that displays a friendly error message.</pre>\n<pre class="line after"><span class="ws">    </span>callback, param_dict = resolver.resolve_error_handler(500)</pre>\n<pre class="line after"><span class="ws">    </span>return callback(request, **param_dict)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683657259216">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">null_technical_500_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>elif tld.wsgi_tb:</pre>\n<pre class="line before"><span class="ws">            </span>tb = tld.wsgi_tb</pre>\n<pre class="line before"><span class="ws">    </span>except AttributeError:</pre>\n<pre class="line before"><span class="ws">        </span>pass</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">    </span>six.reraise(exc_type, exc_value, tb)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652811536">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/six.py"</cite>,\n      line <em class="line">695</em>,\n      in <code class="function">reraise</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>if value is None:</pre>\n<pre class="line before"><span class="ws">                </span>value = tp()</pre>\n<pre class="line before"><span class="ws">            </span>if value.__traceback__ is not tb:</pre>\n<pre class="line current"><span class="ws">                </span>raise value.with_traceback(tb)</pre>\n<pre class="line after"><span class="ws">            </span>raise value</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre>\n<pre class="line after"><span class="ws">            </span>value = None</pre>\n<pre class="line after"><span class="ws">            </span>tb = None</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652811344">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">34</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>can rely on getting a response instead of an exception.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683657259408">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">115</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre>\n<pre class="line after"><span class="ws">            </span>if isinstance(callback, types.FunctionType):    # FBV</pre>\n<pre class="line after"><span class="ws">                </span>view_name = callback.__name__</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652810000">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">113</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>break</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line current"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652810832">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/contextlib.py"</cite>,\n      line <em class="line">74</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, func):</pre>\n<pre class="line before"><span class="ws">        </span>@wraps(func)</pre>\n<pre class="line before"><span class="ws">        </span>def inner(*args, **kwds):</pre>\n<pre class="line before"><span class="ws">            </span>with self._recreate_cm():</pre>\n<pre class="line current"><span class="ws">                </span>return func(*args, **kwds)</pre>\n<pre class="line after"><span class="ws">        </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class _GeneratorContextManagerBase:</pre>\n<pre class="line after"><span class="ws">    </span>&quot;&quot;&quot;Shared functionality for @contextmanager and @asynccontextmanager.&quot;&quot;&quot;</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652810640">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py"</cite>,\n      line <em class="line">54</em>,\n      in <code class="function">wrapped_view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span>def csrf_exempt(view_func):</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span># view_func.csrf_exempt = True would also work, but decorators are nicer</pre>\n<pre class="line before"><span class="ws">    </span># if they don\'t have side effects, so return a new function.</pre>\n<pre class="line before"><span class="ws">    </span>def wrapped_view(*args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return view_func(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">    </span>wrapped_view.csrf_exempt = True</pre>\n<pre class="line after"><span class="ws">    </span>return wraps(view_func)(wrapped_view)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652810896">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/generic/base.py"</cite>,\n      line <em class="line">71</em>,\n      in <code class="function">view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>if not hasattr(self, \'request\'):</pre>\n<pre class="line before"><span class="ws">                </span>raise AttributeError(</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;%s instance has no \'request\' attribute. Did you override &quot;</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;setup() and forget to call super()?&quot; % cls.__name__</pre>\n<pre class="line before"><span class="ws">                </span>)</pre>\n<pre class="line current"><span class="ws">            </span>return self.dispatch(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>view.view_class = cls</pre>\n<pre class="line after"><span class="ws">        </span>view.view_initkwargs = initkwargs</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># take name and docstring from class</pre>\n<pre class="line after"><span class="ws">        </span>update_wrapper(view, cls, updated=())</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652811216">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">505</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>return self.response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def options(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652812240">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">465</em>,\n      in <code class="function">handle_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>context = self.get_exception_handler_context()</pre>\n<pre class="line before"><span class="ws">        </span>response = exception_handler(exc, context)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line current"><span class="ws">            </span>self.raise_uncaught_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response.exception = True</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def raise_uncaught_exception(self, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652811472">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">476</em>,\n      in <code class="function">raise_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if settings.DEBUG:</pre>\n<pre class="line before"><span class="ws">            </span>request = self.request</pre>\n<pre class="line before"><span class="ws">            </span>renderer_format = getattr(request.accepted_renderer, \'format\')</pre>\n<pre class="line before"><span class="ws">            </span>use_plaintext_traceback = renderer_format not in (\'html\', \'api\', \'admin\')</pre>\n<pre class="line before"><span class="ws">            </span>request.force_plaintext_errors(use_plaintext_traceback)</pre>\n<pre class="line current"><span class="ws">        </span>raise exc</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Note: Views are made CSRF exempt from within `as_view` as to prevent</pre>\n<pre class="line after"><span class="ws">    </span># accidental removal of this exemption in cases where `dispatch` needs to</pre>\n<pre class="line after"><span class="ws">    </span># be overridden.</pre>\n<pre class="line after"><span class="ws">    </span>def dispatch(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652811920">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">502</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = getattr(self, request.method.lower(),</pre>\n<pre class="line before"><span class="ws">                                  </span>self.http_method_not_allowed)</pre>\n<pre class="line before"><span class="ws">            </span>else:</pre>\n<pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652812560">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/generics.py"</cite>,\n      line <em class="line">242</em>,\n      in <code class="function">post</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def post(self, request, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return self.create(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class RetrieveUpdateAPIView(mixins.RetrieveModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>mixins.UpdateModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>GenericAPIView):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652812752">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py"</cite>,\n      line <em class="line">19</em>,\n      in <code class="function">create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>Create a model instance.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def create(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>serializer = self.get_serializer(data=request.data)</pre>\n<pre class="line before"><span class="ws">        </span>serializer.is_valid(raise_exception=True)</pre>\n<pre class="line current"><span class="ws">        </span>self.perform_create(serializer)</pre>\n<pre class="line after"><span class="ws">        </span>headers = self.get_success_headers(serializer.data)</pre>\n<pre class="line after"><span class="ws">        </span>return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line after"><span class="ws">        </span>serializer.save()</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652812304">\n  <h4>File <cite class="filename">"/app/ultra_predictor/api_races/api.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">perform_create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])</pre>\n<pre class="line after"><span class="ws">            </span>serializer.save(event=event)</pre>\n<pre class="line after"><span class="ws">        </span>except Event.DoesNotExist:</pre>\n<pre class="line after"><span class="ws">            </span>logger.error(f&quot;Event not found: {self.request.data}&quot;)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652810960">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/manager.py"</cite>,\n      line <em class="line">82</em>,\n      in <code class="function">manager_method</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>@classmethod</pre>\n<pre class="line before"><span class="ws">    </span>def _get_queryset_methods(cls, queryset_class):</pre>\n<pre class="line before"><span class="ws">        </span>def create_method(name, method):</pre>\n<pre class="line before"><span class="ws">            </span>def manager_method(self, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">                </span>return getattr(self.get_queryset(), name)(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__name__ = method.__name__</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__doc__ = method.__doc__</pre>\n<pre class="line after"><span class="ws">            </span>return manager_method</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>new_methods = {}</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683652812112">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/query.py"</cite>,\n      line <em class="line">412</em>,\n      in <code class="function">get</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>&quot;%s matching query does not exist.&quot; %</pre>\n<pre class="line before"><span class="ws">                </span>self.model._meta.object_name</pre>\n<pre class="line before"><span class="ws">            </span>)</pre>\n<pre class="line before"><span class="ws">        </span>raise self.model.MultipleObjectsReturned(</pre>\n<pre class="line before"><span class="ws">            </span>&quot;get() returned more than one %s -- it returned %s!&quot; %</pre>\n<pre class="line current"><span class="ws">            </span>(self.model._meta.object_name, num)</pre>\n<pre class="line after"><span class="ws">        </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def create(self, **kwargs):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line after"><span class="ws">        </span>Create a new object with the given kwargs, saving it to the database</pre></div>\n</div>\n</ul>\n  <blockquote>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</blockquote>\n</div>\n\n<div class="plain">\n  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">\n    <p>\n      <input type="hidden" name="language" value="pytb">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class="pastemessage">You can also paste this traceback into\n      a <a href="https://gist.github.com/">gist</a>:\n      <input type="submit" value="create paste"></span>\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py&quot;, line 65, in __call__\n    return self.application(environ, start_response)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py&quot;, line 141, in __call__\n    response = self.get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 75, in get_response\n    response = self._middleware_chain(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 36, in inner\n    response = response_for_exception(request, exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File &quot;/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py&quot;, line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/six.py&quot;, line 695, in reraise\n    raise value.with_traceback(tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 34, in inner\n    response = get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File &quot;/usr/local/lib/python3.7/contextlib.py&quot;, line 74, in inner\n    return func(*args, **kwds)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py&quot;, line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/generic/base.py&quot;, line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 505, in dispatch\n    response = self.handle_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 476, in raise_uncaught_exception\n    raise exc\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/generics.py&quot;, line 242, in post\n    return self.create(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py&quot;, line 19, in create\n    self.perform_create(serializer)\n  File &quot;/app/ultra_predictor/api_races/api.py&quot;, line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/manager.py&quot;, line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/query.py&quot;, line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</textarea>\n  </form>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py", line 65, in __call__\n    return self.application(environ, start_response)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py", line 141, in __call__\n    response = self.get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 75, in get_response\n    response = self._middleware_chain(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 36, in inner\n    response = response_for_exception(request, exc)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File "/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py", line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File "/usr/local/lib/python3.7/site-packages/six.py", line 695, in reraise\n    raise value.with_traceback(tb)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner\n    response = get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File "/usr/local/lib/python3.7/contextlib.py", line 74, in inner\n    return func(*args, **kwds)\n  File "/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/views/generic/base.py", line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 505, in dispatch\n    response = self.handle_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 476, in raise_uncaught_exception\n    raise exc\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/generics.py", line 242, in post\n    return self.create(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py", line 19, in create\n    self.perform_create(serializer)\n  File "/app/ultra_predictor/api_races/api.py", line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data["itra_event_id"])\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/manager.py", line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/query.py", line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event - it returned 2!\n\n-->\n', item: {'ascent': '3720',
 'challenge': None,
 'championship': None,
 'city_finish': 'Argeles',
 'city_start': 'Arles sur Tech',
 'country_finish': 'France',
 'country_start': 'France',
 'descent': '3980',
 'distance': '79',
 'finish_point': None,
 'itra_event_id': 8,
 'itra_point': '4',
 'itra_race_id': 4666,
 'map_link': 'https://tracedetrail.fr/en/trace/itra/70556',
 'max_time': None,
 'mount_point': '6',
 'name': 'Traversée Sud De France',
 'participation': 'solo',
 'pistes': '40',
 'race_date': '2018-10-06',
 'race_time': '07:00:00',
 'refreshment_points': '5',
 'routes': '5',
 'sentiers': '55'}
2019-12-20 15:13:30 [root] ERROR: Error RACE:, reqb'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2! // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 140683652810256,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "J8Ix9c8yqMv8LeUqVPy3";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ultra_predictor.races.models.MultipleObjectsReturned</h1>\n<div class="detail">\n  <p class="errormsg">ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  \n  <ul><li><div class="frame" id="frame-140683657271760">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py"</cite>,\n      line <em class="line">65</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>return response_for_exception(request, e)</pre>\n<pre class="line before"><span class="ws">        </span>return super().get_response(request)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>if not self._should_handle(get_path_info(environ)):</pre>\n<pre class="line current"><span class="ws">            </span>return self.application(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>return super().__call__(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683657272272">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py"</cite>,\n      line <em class="line">141</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>set_script_prefix(get_script_name(environ))</pre>\n<pre class="line before"><span class="ws">        </span>signals.request_started.send(sender=self.__class__, environ=environ)</pre>\n<pre class="line before"><span class="ws">        </span>request = self.request_class(environ)</pre>\n<pre class="line current"><span class="ws">        </span>response = self.get_response(request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response._handler_class = self.__class__</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>status = \'%d %s\' % (response.status_code, response.reason_phrase)</pre>\n<pre class="line after"><span class="ws">        </span>response_headers = [</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683657271696">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">75</em>,\n      in <code class="function">get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def get_response(self, request):</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Return an HttpResponse object for the given HttpRequest.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">        </span># Setup default url resolver for this thread</pre>\n<pre class="line before"><span class="ws">        </span>set_urlconf(settings.ROOT_URLCONF)</pre>\n<pre class="line current"><span class="ws">        </span>response = self._middleware_chain(request)</pre>\n<pre class="line after"><span class="ws">        </span>response._closable_objects.append(request)</pre>\n<pre class="line after"><span class="ws">        </span>if response.status_code &gt;= 400:</pre>\n<pre class="line after"><span class="ws">            </span>log_response(</pre>\n<pre class="line after"><span class="ws">                </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">                </span>response=response,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683657271824">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">36</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>def response_for_exception(request, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683657272080">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">90</em>,\n      in <code class="function">response_for_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span># Allow sys.exit() to actually exit. See tickets #1023 and #4701</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>else:</pre>\n<pre class="line before"><span class="ws">        </span>signals.got_request_exception.send(sender=None, request=request)</pre>\n<pre class="line current"><span class="ws">        </span>response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())</pre>\n<pre class="line after"><span class="ws">        </span>log_response(</pre>\n<pre class="line after"><span class="ws">            </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">            </span>response=response,</pre>\n<pre class="line after"><span class="ws">            </span>request=request,</pre>\n<pre class="line after"><span class="ws">            </span>exc_info=sys.exc_info(),</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655972944">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">125</em>,\n      in <code class="function">handle_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG_PROPAGATE_EXCEPTIONS:</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG:</pre>\n<pre class="line current"><span class="ws">        </span>return debug.technical_500_response(request, *exc_info)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Return an HttpResponse that displays a friendly error message.</pre>\n<pre class="line after"><span class="ws">    </span>callback, param_dict = resolver.resolve_error_handler(500)</pre>\n<pre class="line after"><span class="ws">    </span>return callback(request, **param_dict)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655974160">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">null_technical_500_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>elif tld.wsgi_tb:</pre>\n<pre class="line before"><span class="ws">            </span>tb = tld.wsgi_tb</pre>\n<pre class="line before"><span class="ws">    </span>except AttributeError:</pre>\n<pre class="line before"><span class="ws">        </span>pass</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">    </span>six.reraise(exc_type, exc_value, tb)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655973584">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/six.py"</cite>,\n      line <em class="line">695</em>,\n      in <code class="function">reraise</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>if value is None:</pre>\n<pre class="line before"><span class="ws">                </span>value = tp()</pre>\n<pre class="line before"><span class="ws">            </span>if value.__traceback__ is not tb:</pre>\n<pre class="line current"><span class="ws">                </span>raise value.with_traceback(tb)</pre>\n<pre class="line after"><span class="ws">            </span>raise value</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre>\n<pre class="line after"><span class="ws">            </span>value = None</pre>\n<pre class="line after"><span class="ws">            </span>tb = None</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655974672">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">34</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>can rely on getting a response instead of an exception.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683657271888">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">115</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre>\n<pre class="line after"><span class="ws">            </span>if isinstance(callback, types.FunctionType):    # FBV</pre>\n<pre class="line after"><span class="ws">                </span>view_name = callback.__name__</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655974288">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">113</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>break</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line current"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655974608">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/contextlib.py"</cite>,\n      line <em class="line">74</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, func):</pre>\n<pre class="line before"><span class="ws">        </span>@wraps(func)</pre>\n<pre class="line before"><span class="ws">        </span>def inner(*args, **kwds):</pre>\n<pre class="line before"><span class="ws">            </span>with self._recreate_cm():</pre>\n<pre class="line current"><span class="ws">                </span>return func(*args, **kwds)</pre>\n<pre class="line after"><span class="ws">        </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class _GeneratorContextManagerBase:</pre>\n<pre class="line after"><span class="ws">    </span>&quot;&quot;&quot;Shared functionality for @contextmanager and @asynccontextmanager.&quot;&quot;&quot;</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655972560">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py"</cite>,\n      line <em class="line">54</em>,\n      in <code class="function">wrapped_view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span>def csrf_exempt(view_func):</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span># view_func.csrf_exempt = True would also work, but decorators are nicer</pre>\n<pre class="line before"><span class="ws">    </span># if they don\'t have side effects, so return a new function.</pre>\n<pre class="line before"><span class="ws">    </span>def wrapped_view(*args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return view_func(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">    </span>wrapped_view.csrf_exempt = True</pre>\n<pre class="line after"><span class="ws">    </span>return wraps(view_func)(wrapped_view)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655970896">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/generic/base.py"</cite>,\n      line <em class="line">71</em>,\n      in <code class="function">view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>if not hasattr(self, \'request\'):</pre>\n<pre class="line before"><span class="ws">                </span>raise AttributeError(</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;%s instance has no \'request\' attribute. Did you override &quot;</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;setup() and forget to call super()?&quot; % cls.__name__</pre>\n<pre class="line before"><span class="ws">                </span>)</pre>\n<pre class="line current"><span class="ws">            </span>return self.dispatch(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>view.view_class = cls</pre>\n<pre class="line after"><span class="ws">        </span>view.view_initkwargs = initkwargs</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># take name and docstring from class</pre>\n<pre class="line after"><span class="ws">        </span>update_wrapper(view, cls, updated=())</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655971792">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">505</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>return self.response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def options(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655973072">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">465</em>,\n      in <code class="function">handle_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>context = self.get_exception_handler_context()</pre>\n<pre class="line before"><span class="ws">        </span>response = exception_handler(exc, context)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line current"><span class="ws">            </span>self.raise_uncaught_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response.exception = True</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def raise_uncaught_exception(self, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655974032">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">476</em>,\n      in <code class="function">raise_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if settings.DEBUG:</pre>\n<pre class="line before"><span class="ws">            </span>request = self.request</pre>\n<pre class="line before"><span class="ws">            </span>renderer_format = getattr(request.accepted_renderer, \'format\')</pre>\n<pre class="line before"><span class="ws">            </span>use_plaintext_traceback = renderer_format not in (\'html\', \'api\', \'admin\')</pre>\n<pre class="line before"><span class="ws">            </span>request.force_plaintext_errors(use_plaintext_traceback)</pre>\n<pre class="line current"><span class="ws">        </span>raise exc</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Note: Views are made CSRF exempt from within `as_view` as to prevent</pre>\n<pre class="line after"><span class="ws">    </span># accidental removal of this exemption in cases where `dispatch` needs to</pre>\n<pre class="line after"><span class="ws">    </span># be overridden.</pre>\n<pre class="line after"><span class="ws">    </span>def dispatch(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655974800">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">502</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = getattr(self, request.method.lower(),</pre>\n<pre class="line before"><span class="ws">                                  </span>self.http_method_not_allowed)</pre>\n<pre class="line before"><span class="ws">            </span>else:</pre>\n<pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655974096">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/generics.py"</cite>,\n      line <em class="line">242</em>,\n      in <code class="function">post</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def post(self, request, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return self.create(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class RetrieveUpdateAPIView(mixins.RetrieveModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>mixins.UpdateModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>GenericAPIView):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655974480">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py"</cite>,\n      line <em class="line">19</em>,\n      in <code class="function">create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>Create a model instance.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def create(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>serializer = self.get_serializer(data=request.data)</pre>\n<pre class="line before"><span class="ws">        </span>serializer.is_valid(raise_exception=True)</pre>\n<pre class="line current"><span class="ws">        </span>self.perform_create(serializer)</pre>\n<pre class="line after"><span class="ws">        </span>headers = self.get_success_headers(serializer.data)</pre>\n<pre class="line after"><span class="ws">        </span>return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line after"><span class="ws">        </span>serializer.save()</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655974864">\n  <h4>File <cite class="filename">"/app/ultra_predictor/api_races/api.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">perform_create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])</pre>\n<pre class="line after"><span class="ws">            </span>serializer.save(event=event)</pre>\n<pre class="line after"><span class="ws">        </span>except Event.DoesNotExist:</pre>\n<pre class="line after"><span class="ws">            </span>logger.error(f&quot;Event not found: {self.request.data}&quot;)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683655973008">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/manager.py"</cite>,\n      line <em class="line">82</em>,\n      in <code class="function">manager_method</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>@classmethod</pre>\n<pre class="line before"><span class="ws">    </span>def _get_queryset_methods(cls, queryset_class):</pre>\n<pre class="line before"><span class="ws">        </span>def create_method(name, method):</pre>\n<pre class="line before"><span class="ws">            </span>def manager_method(self, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">                </span>return getattr(self.get_queryset(), name)(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__name__ = method.__name__</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__doc__ = method.__doc__</pre>\n<pre class="line after"><span class="ws">            </span>return manager_method</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>new_methods = {}</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683656000080">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/query.py"</cite>,\n      line <em class="line">412</em>,\n      in <code class="function">get</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>&quot;%s matching query does not exist.&quot; %</pre>\n<pre class="line before"><span class="ws">                </span>self.model._meta.object_name</pre>\n<pre class="line before"><span class="ws">            </span>)</pre>\n<pre class="line before"><span class="ws">        </span>raise self.model.MultipleObjectsReturned(</pre>\n<pre class="line before"><span class="ws">            </span>&quot;get() returned more than one %s -- it returned %s!&quot; %</pre>\n<pre class="line current"><span class="ws">            </span>(self.model._meta.object_name, num)</pre>\n<pre class="line after"><span class="ws">        </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def create(self, **kwargs):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line after"><span class="ws">        </span>Create a new object with the given kwargs, saving it to the database</pre></div>\n</div>\n</ul>\n  <blockquote>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</blockquote>\n</div>\n\n<div class="plain">\n  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">\n    <p>\n      <input type="hidden" name="language" value="pytb">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class="pastemessage">You can also paste this traceback into\n      a <a href="https://gist.github.com/">gist</a>:\n      <input type="submit" value="create paste"></span>\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py&quot;, line 65, in __call__\n    return self.application(environ, start_response)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py&quot;, line 141, in __call__\n    response = self.get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 75, in get_response\n    response = self._middleware_chain(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 36, in inner\n    response = response_for_exception(request, exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File &quot;/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py&quot;, line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/six.py&quot;, line 695, in reraise\n    raise value.with_traceback(tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 34, in inner\n    response = get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File &quot;/usr/local/lib/python3.7/contextlib.py&quot;, line 74, in inner\n    return func(*args, **kwds)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py&quot;, line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/generic/base.py&quot;, line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 505, in dispatch\n    response = self.handle_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 476, in raise_uncaught_exception\n    raise exc\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/generics.py&quot;, line 242, in post\n    return self.create(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py&quot;, line 19, in create\n    self.perform_create(serializer)\n  File &quot;/app/ultra_predictor/api_races/api.py&quot;, line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/manager.py&quot;, line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/query.py&quot;, line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</textarea>\n  </form>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py", line 65, in __call__\n    return self.application(environ, start_response)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py", line 141, in __call__\n    response = self.get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 75, in get_response\n    response = self._middleware_chain(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 36, in inner\n    response = response_for_exception(request, exc)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File "/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py", line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File "/usr/local/lib/python3.7/site-packages/six.py", line 695, in reraise\n    raise value.with_traceback(tb)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner\n    response = get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File "/usr/local/lib/python3.7/contextlib.py", line 74, in inner\n    return func(*args, **kwds)\n  File "/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/views/generic/base.py", line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 505, in dispatch\n    response = self.handle_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 476, in raise_uncaught_exception\n    raise exc\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/generics.py", line 242, in post\n    return self.create(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py", line 19, in create\n    self.perform_create(serializer)\n  File "/app/ultra_predictor/api_races/api.py", line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data["itra_event_id"])\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/manager.py", line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/query.py", line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event - it returned 2!\n\n-->\n', item: {'ascent': '5640',
 'challenge': 'non',
 'championship': 'non',
 'city_finish': 'Argeles',
 'city_start': 'Vernet les bains',
 'country_finish': 'France',
 'country_start': 'France',
 'descent': '6290',
 'distance': '117.4',
 'finish_point': '370',
 'itra_event_id': 8,
 'itra_point': '5',
 'itra_race_id': 3915,
 'map_link': 'https://tracedetrail.fr/en/trace/itra/70555',
 'max_time': datetime.timedelta(days=1, seconds=21600),
 'mount_point': '6',
 'name': 'Grande Traversée',
 'participation': 'solo',
 'pistes': '25',
 'race_date': '2018-10-05',
 'race_time': '17:00:00',
 'refreshment_points': '12',
 'routes': '15',
 'sentiers': '60'}
2019-12-20 15:13:31 [root] ERROR: Error RACE:, reqb'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2! // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 140683638878544,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "J8Ix9c8yqMv8LeUqVPy3";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ultra_predictor.races.models.MultipleObjectsReturned</h1>\n<div class="detail">\n  <p class="errormsg">ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  \n  <ul><li><div class="frame" id="frame-140683638878480">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py"</cite>,\n      line <em class="line">65</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>return response_for_exception(request, e)</pre>\n<pre class="line before"><span class="ws">        </span>return super().get_response(request)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>if not self._should_handle(get_path_info(environ)):</pre>\n<pre class="line current"><span class="ws">            </span>return self.application(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>return super().__call__(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638878800">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py"</cite>,\n      line <em class="line">141</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>set_script_prefix(get_script_name(environ))</pre>\n<pre class="line before"><span class="ws">        </span>signals.request_started.send(sender=self.__class__, environ=environ)</pre>\n<pre class="line before"><span class="ws">        </span>request = self.request_class(environ)</pre>\n<pre class="line current"><span class="ws">        </span>response = self.get_response(request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response._handler_class = self.__class__</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>status = \'%d %s\' % (response.status_code, response.reason_phrase)</pre>\n<pre class="line after"><span class="ws">        </span>response_headers = [</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638878992">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">75</em>,\n      in <code class="function">get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def get_response(self, request):</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Return an HttpResponse object for the given HttpRequest.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">        </span># Setup default url resolver for this thread</pre>\n<pre class="line before"><span class="ws">        </span>set_urlconf(settings.ROOT_URLCONF)</pre>\n<pre class="line current"><span class="ws">        </span>response = self._middleware_chain(request)</pre>\n<pre class="line after"><span class="ws">        </span>response._closable_objects.append(request)</pre>\n<pre class="line after"><span class="ws">        </span>if response.status_code &gt;= 400:</pre>\n<pre class="line after"><span class="ws">            </span>log_response(</pre>\n<pre class="line after"><span class="ws">                </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">                </span>response=response,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638878416">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">36</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>def response_for_exception(request, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638816336">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">90</em>,\n      in <code class="function">response_for_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span># Allow sys.exit() to actually exit. See tickets #1023 and #4701</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>else:</pre>\n<pre class="line before"><span class="ws">        </span>signals.got_request_exception.send(sender=None, request=request)</pre>\n<pre class="line current"><span class="ws">        </span>response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())</pre>\n<pre class="line after"><span class="ws">        </span>log_response(</pre>\n<pre class="line after"><span class="ws">            </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">            </span>response=response,</pre>\n<pre class="line after"><span class="ws">            </span>request=request,</pre>\n<pre class="line after"><span class="ws">            </span>exc_info=sys.exc_info(),</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638419088">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">125</em>,\n      in <code class="function">handle_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG_PROPAGATE_EXCEPTIONS:</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG:</pre>\n<pre class="line current"><span class="ws">        </span>return debug.technical_500_response(request, *exc_info)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Return an HttpResponse that displays a friendly error message.</pre>\n<pre class="line after"><span class="ws">    </span>callback, param_dict = resolver.resolve_error_handler(500)</pre>\n<pre class="line after"><span class="ws">    </span>return callback(request, **param_dict)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638419216">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">null_technical_500_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>elif tld.wsgi_tb:</pre>\n<pre class="line before"><span class="ws">            </span>tb = tld.wsgi_tb</pre>\n<pre class="line before"><span class="ws">    </span>except AttributeError:</pre>\n<pre class="line before"><span class="ws">        </span>pass</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">    </span>six.reraise(exc_type, exc_value, tb)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638419152">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/six.py"</cite>,\n      line <em class="line">695</em>,\n      in <code class="function">reraise</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>if value is None:</pre>\n<pre class="line before"><span class="ws">                </span>value = tp()</pre>\n<pre class="line before"><span class="ws">            </span>if value.__traceback__ is not tb:</pre>\n<pre class="line current"><span class="ws">                </span>raise value.with_traceback(tb)</pre>\n<pre class="line after"><span class="ws">            </span>raise value</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre>\n<pre class="line after"><span class="ws">            </span>value = None</pre>\n<pre class="line after"><span class="ws">            </span>tb = None</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638418768">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">34</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>can rely on getting a response instead of an exception.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638418704">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">115</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre>\n<pre class="line after"><span class="ws">            </span>if isinstance(callback, types.FunctionType):    # FBV</pre>\n<pre class="line after"><span class="ws">                </span>view_name = callback.__name__</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638469136">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">113</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>break</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line current"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638469264">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/contextlib.py"</cite>,\n      line <em class="line">74</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, func):</pre>\n<pre class="line before"><span class="ws">        </span>@wraps(func)</pre>\n<pre class="line before"><span class="ws">        </span>def inner(*args, **kwds):</pre>\n<pre class="line before"><span class="ws">            </span>with self._recreate_cm():</pre>\n<pre class="line current"><span class="ws">                </span>return func(*args, **kwds)</pre>\n<pre class="line after"><span class="ws">        </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class _GeneratorContextManagerBase:</pre>\n<pre class="line after"><span class="ws">    </span>&quot;&quot;&quot;Shared functionality for @contextmanager and @asynccontextmanager.&quot;&quot;&quot;</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638468816">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py"</cite>,\n      line <em class="line">54</em>,\n      in <code class="function">wrapped_view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span>def csrf_exempt(view_func):</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span># view_func.csrf_exempt = True would also work, but decorators are nicer</pre>\n<pre class="line before"><span class="ws">    </span># if they don\'t have side effects, so return a new function.</pre>\n<pre class="line before"><span class="ws">    </span>def wrapped_view(*args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return view_func(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">    </span>wrapped_view.csrf_exempt = True</pre>\n<pre class="line after"><span class="ws">    </span>return wraps(view_func)(wrapped_view)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638470160">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/generic/base.py"</cite>,\n      line <em class="line">71</em>,\n      in <code class="function">view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>if not hasattr(self, \'request\'):</pre>\n<pre class="line before"><span class="ws">                </span>raise AttributeError(</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;%s instance has no \'request\' attribute. Did you override &quot;</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;setup() and forget to call super()?&quot; % cls.__name__</pre>\n<pre class="line before"><span class="ws">                </span>)</pre>\n<pre class="line current"><span class="ws">            </span>return self.dispatch(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>view.view_class = cls</pre>\n<pre class="line after"><span class="ws">        </span>view.view_initkwargs = initkwargs</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># take name and docstring from class</pre>\n<pre class="line after"><span class="ws">        </span>update_wrapper(view, cls, updated=())</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638469392">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">505</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>return self.response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def options(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638468880">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">465</em>,\n      in <code class="function">handle_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>context = self.get_exception_handler_context()</pre>\n<pre class="line before"><span class="ws">        </span>response = exception_handler(exc, context)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line current"><span class="ws">            </span>self.raise_uncaught_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response.exception = True</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def raise_uncaught_exception(self, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638469008">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">476</em>,\n      in <code class="function">raise_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if settings.DEBUG:</pre>\n<pre class="line before"><span class="ws">            </span>request = self.request</pre>\n<pre class="line before"><span class="ws">            </span>renderer_format = getattr(request.accepted_renderer, \'format\')</pre>\n<pre class="line before"><span class="ws">            </span>use_plaintext_traceback = renderer_format not in (\'html\', \'api\', \'admin\')</pre>\n<pre class="line before"><span class="ws">            </span>request.force_plaintext_errors(use_plaintext_traceback)</pre>\n<pre class="line current"><span class="ws">        </span>raise exc</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Note: Views are made CSRF exempt from within `as_view` as to prevent</pre>\n<pre class="line after"><span class="ws">    </span># accidental removal of this exemption in cases where `dispatch` needs to</pre>\n<pre class="line after"><span class="ws">    </span># be overridden.</pre>\n<pre class="line after"><span class="ws">    </span>def dispatch(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638470096">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">502</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = getattr(self, request.method.lower(),</pre>\n<pre class="line before"><span class="ws">                                  </span>self.http_method_not_allowed)</pre>\n<pre class="line before"><span class="ws">            </span>else:</pre>\n<pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638470736">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/generics.py"</cite>,\n      line <em class="line">242</em>,\n      in <code class="function">post</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def post(self, request, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return self.create(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class RetrieveUpdateAPIView(mixins.RetrieveModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>mixins.UpdateModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>GenericAPIView):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638470928">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py"</cite>,\n      line <em class="line">19</em>,\n      in <code class="function">create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>Create a model instance.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def create(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>serializer = self.get_serializer(data=request.data)</pre>\n<pre class="line before"><span class="ws">        </span>serializer.is_valid(raise_exception=True)</pre>\n<pre class="line current"><span class="ws">        </span>self.perform_create(serializer)</pre>\n<pre class="line after"><span class="ws">        </span>headers = self.get_success_headers(serializer.data)</pre>\n<pre class="line after"><span class="ws">        </span>return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line after"><span class="ws">        </span>serializer.save()</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638470480">\n  <h4>File <cite class="filename">"/app/ultra_predictor/api_races/api.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">perform_create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])</pre>\n<pre class="line after"><span class="ws">            </span>serializer.save(event=event)</pre>\n<pre class="line after"><span class="ws">        </span>except Event.DoesNotExist:</pre>\n<pre class="line after"><span class="ws">            </span>logger.error(f&quot;Event not found: {self.request.data}&quot;)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638468688">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/manager.py"</cite>,\n      line <em class="line">82</em>,\n      in <code class="function">manager_method</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>@classmethod</pre>\n<pre class="line before"><span class="ws">    </span>def _get_queryset_methods(cls, queryset_class):</pre>\n<pre class="line before"><span class="ws">        </span>def create_method(name, method):</pre>\n<pre class="line before"><span class="ws">            </span>def manager_method(self, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">                </span>return getattr(self.get_queryset(), name)(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__name__ = method.__name__</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__doc__ = method.__doc__</pre>\n<pre class="line after"><span class="ws">            </span>return manager_method</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>new_methods = {}</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638470288">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/query.py"</cite>,\n      line <em class="line">412</em>,\n      in <code class="function">get</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>&quot;%s matching query does not exist.&quot; %</pre>\n<pre class="line before"><span class="ws">                </span>self.model._meta.object_name</pre>\n<pre class="line before"><span class="ws">            </span>)</pre>\n<pre class="line before"><span class="ws">        </span>raise self.model.MultipleObjectsReturned(</pre>\n<pre class="line before"><span class="ws">            </span>&quot;get() returned more than one %s -- it returned %s!&quot; %</pre>\n<pre class="line current"><span class="ws">            </span>(self.model._meta.object_name, num)</pre>\n<pre class="line after"><span class="ws">        </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def create(self, **kwargs):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line after"><span class="ws">        </span>Create a new object with the given kwargs, saving it to the database</pre></div>\n</div>\n</ul>\n  <blockquote>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</blockquote>\n</div>\n\n<div class="plain">\n  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">\n    <p>\n      <input type="hidden" name="language" value="pytb">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class="pastemessage">You can also paste this traceback into\n      a <a href="https://gist.github.com/">gist</a>:\n      <input type="submit" value="create paste"></span>\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py&quot;, line 65, in __call__\n    return self.application(environ, start_response)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py&quot;, line 141, in __call__\n    response = self.get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 75, in get_response\n    response = self._middleware_chain(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 36, in inner\n    response = response_for_exception(request, exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File &quot;/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py&quot;, line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/six.py&quot;, line 695, in reraise\n    raise value.with_traceback(tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 34, in inner\n    response = get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File &quot;/usr/local/lib/python3.7/contextlib.py&quot;, line 74, in inner\n    return func(*args, **kwds)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py&quot;, line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/generic/base.py&quot;, line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 505, in dispatch\n    response = self.handle_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 476, in raise_uncaught_exception\n    raise exc\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/generics.py&quot;, line 242, in post\n    return self.create(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py&quot;, line 19, in create\n    self.perform_create(serializer)\n  File &quot;/app/ultra_predictor/api_races/api.py&quot;, line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/manager.py&quot;, line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/query.py&quot;, line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</textarea>\n  </form>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py", line 65, in __call__\n    return self.application(environ, start_response)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py", line 141, in __call__\n    response = self.get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 75, in get_response\n    response = self._middleware_chain(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 36, in inner\n    response = response_for_exception(request, exc)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File "/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py", line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File "/usr/local/lib/python3.7/site-packages/six.py", line 695, in reraise\n    raise value.with_traceback(tb)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner\n    response = get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File "/usr/local/lib/python3.7/contextlib.py", line 74, in inner\n    return func(*args, **kwds)\n  File "/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/views/generic/base.py", line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 505, in dispatch\n    response = self.handle_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 476, in raise_uncaught_exception\n    raise exc\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/generics.py", line 242, in post\n    return self.create(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py", line 19, in create\n    self.perform_create(serializer)\n  File "/app/ultra_predictor/api_races/api.py", line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data["itra_event_id"])\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/manager.py", line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/query.py", line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event - it returned 2!\n\n-->\n', item: {'ascent': '3320',
 'challenge': None,
 'championship': None,
 'city_finish': 'Constanza',
 'city_start': 'San José de Ocoa',
 'country_finish': 'Dominican Republic',
 'country_start': 'Dominican Republic',
 'descent': '2550',
 'distance': '100.6',
 'finish_point': '270',
 'itra_event_id': 11,
 'itra_point': '4',
 'itra_race_id': 3080,
 'map_link': 'https://tracedetrail.fr/en/trace/itra/47357',
 'max_time': datetime.timedelta(days=1, seconds=7200),
 'mount_point': '5',
 'name': '100Km Del Caribe Non Stop',
 'participation': 'solo',
 'pistes': '85',
 'race_date': '2018-02-24',
 'race_time': '14:00:00',
 'refreshment_points': '5',
 'routes': '15',
 'sentiers': '0'}
2019-12-20 15:13:33 [root] ERROR: Error RACE:, reqb'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2! // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 140683637781968,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "J8Ix9c8yqMv8LeUqVPy3";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ultra_predictor.races.models.MultipleObjectsReturned</h1>\n<div class="detail">\n  <p class="errormsg">ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  \n  <ul><li><div class="frame" id="frame-140683637781904">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py"</cite>,\n      line <em class="line">65</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>return response_for_exception(request, e)</pre>\n<pre class="line before"><span class="ws">        </span>return super().get_response(request)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>if not self._should_handle(get_path_info(environ)):</pre>\n<pre class="line current"><span class="ws">            </span>return self.application(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>return super().__call__(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637782480">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py"</cite>,\n      line <em class="line">141</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>set_script_prefix(get_script_name(environ))</pre>\n<pre class="line before"><span class="ws">        </span>signals.request_started.send(sender=self.__class__, environ=environ)</pre>\n<pre class="line before"><span class="ws">        </span>request = self.request_class(environ)</pre>\n<pre class="line current"><span class="ws">        </span>response = self.get_response(request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response._handler_class = self.__class__</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>status = \'%d %s\' % (response.status_code, response.reason_phrase)</pre>\n<pre class="line after"><span class="ws">        </span>response_headers = [</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637783888">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">75</em>,\n      in <code class="function">get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def get_response(self, request):</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Return an HttpResponse object for the given HttpRequest.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">        </span># Setup default url resolver for this thread</pre>\n<pre class="line before"><span class="ws">        </span>set_urlconf(settings.ROOT_URLCONF)</pre>\n<pre class="line current"><span class="ws">        </span>response = self._middleware_chain(request)</pre>\n<pre class="line after"><span class="ws">        </span>response._closable_objects.append(request)</pre>\n<pre class="line after"><span class="ws">        </span>if response.status_code &gt;= 400:</pre>\n<pre class="line after"><span class="ws">            </span>log_response(</pre>\n<pre class="line after"><span class="ws">                </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">                </span>response=response,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637782032">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">36</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>def response_for_exception(request, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637782288">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">90</em>,\n      in <code class="function">response_for_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span># Allow sys.exit() to actually exit. See tickets #1023 and #4701</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>else:</pre>\n<pre class="line before"><span class="ws">        </span>signals.got_request_exception.send(sender=None, request=request)</pre>\n<pre class="line current"><span class="ws">        </span>response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())</pre>\n<pre class="line after"><span class="ws">        </span>log_response(</pre>\n<pre class="line after"><span class="ws">            </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">            </span>response=response,</pre>\n<pre class="line after"><span class="ws">            </span>request=request,</pre>\n<pre class="line after"><span class="ws">            </span>exc_info=sys.exc_info(),</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637359952">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">125</em>,\n      in <code class="function">handle_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG_PROPAGATE_EXCEPTIONS:</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG:</pre>\n<pre class="line current"><span class="ws">        </span>return debug.technical_500_response(request, *exc_info)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Return an HttpResponse that displays a friendly error message.</pre>\n<pre class="line after"><span class="ws">    </span>callback, param_dict = resolver.resolve_error_handler(500)</pre>\n<pre class="line after"><span class="ws">    </span>return callback(request, **param_dict)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637360656">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">null_technical_500_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>elif tld.wsgi_tb:</pre>\n<pre class="line before"><span class="ws">            </span>tb = tld.wsgi_tb</pre>\n<pre class="line before"><span class="ws">    </span>except AttributeError:</pre>\n<pre class="line before"><span class="ws">        </span>pass</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">    </span>six.reraise(exc_type, exc_value, tb)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637359696">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/six.py"</cite>,\n      line <em class="line">695</em>,\n      in <code class="function">reraise</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>if value is None:</pre>\n<pre class="line before"><span class="ws">                </span>value = tp()</pre>\n<pre class="line before"><span class="ws">            </span>if value.__traceback__ is not tb:</pre>\n<pre class="line current"><span class="ws">                </span>raise value.with_traceback(tb)</pre>\n<pre class="line after"><span class="ws">            </span>raise value</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre>\n<pre class="line after"><span class="ws">            </span>value = None</pre>\n<pre class="line after"><span class="ws">            </span>tb = None</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637361232">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">34</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>can rely on getting a response instead of an exception.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637782096">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">115</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre>\n<pre class="line after"><span class="ws">            </span>if isinstance(callback, types.FunctionType):    # FBV</pre>\n<pre class="line after"><span class="ws">                </span>view_name = callback.__name__</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637360336">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">113</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>break</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line current"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637361808">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/contextlib.py"</cite>,\n      line <em class="line">74</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, func):</pre>\n<pre class="line before"><span class="ws">        </span>@wraps(func)</pre>\n<pre class="line before"><span class="ws">        </span>def inner(*args, **kwds):</pre>\n<pre class="line before"><span class="ws">            </span>with self._recreate_cm():</pre>\n<pre class="line current"><span class="ws">                </span>return func(*args, **kwds)</pre>\n<pre class="line after"><span class="ws">        </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class _GeneratorContextManagerBase:</pre>\n<pre class="line after"><span class="ws">    </span>&quot;&quot;&quot;Shared functionality for @contextmanager and @asynccontextmanager.&quot;&quot;&quot;</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637360528">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py"</cite>,\n      line <em class="line">54</em>,\n      in <code class="function">wrapped_view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span>def csrf_exempt(view_func):</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span># view_func.csrf_exempt = True would also work, but decorators are nicer</pre>\n<pre class="line before"><span class="ws">    </span># if they don\'t have side effects, so return a new function.</pre>\n<pre class="line before"><span class="ws">    </span>def wrapped_view(*args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return view_func(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">    </span>wrapped_view.csrf_exempt = True</pre>\n<pre class="line after"><span class="ws">    </span>return wraps(view_func)(wrapped_view)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637360784">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/generic/base.py"</cite>,\n      line <em class="line">71</em>,\n      in <code class="function">view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>if not hasattr(self, \'request\'):</pre>\n<pre class="line before"><span class="ws">                </span>raise AttributeError(</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;%s instance has no \'request\' attribute. Did you override &quot;</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;setup() and forget to call super()?&quot; % cls.__name__</pre>\n<pre class="line before"><span class="ws">                </span>)</pre>\n<pre class="line current"><span class="ws">            </span>return self.dispatch(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>view.view_class = cls</pre>\n<pre class="line after"><span class="ws">        </span>view.view_initkwargs = initkwargs</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># take name and docstring from class</pre>\n<pre class="line after"><span class="ws">        </span>update_wrapper(view, cls, updated=())</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637360912">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">505</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>return self.response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def options(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637360592">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">465</em>,\n      in <code class="function">handle_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>context = self.get_exception_handler_context()</pre>\n<pre class="line before"><span class="ws">        </span>response = exception_handler(exc, context)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line current"><span class="ws">            </span>self.raise_uncaught_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response.exception = True</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def raise_uncaught_exception(self, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637360848">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">476</em>,\n      in <code class="function">raise_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if settings.DEBUG:</pre>\n<pre class="line before"><span class="ws">            </span>request = self.request</pre>\n<pre class="line before"><span class="ws">            </span>renderer_format = getattr(request.accepted_renderer, \'format\')</pre>\n<pre class="line before"><span class="ws">            </span>use_plaintext_traceback = renderer_format not in (\'html\', \'api\', \'admin\')</pre>\n<pre class="line before"><span class="ws">            </span>request.force_plaintext_errors(use_plaintext_traceback)</pre>\n<pre class="line current"><span class="ws">        </span>raise exc</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Note: Views are made CSRF exempt from within `as_view` as to prevent</pre>\n<pre class="line after"><span class="ws">    </span># accidental removal of this exemption in cases where `dispatch` needs to</pre>\n<pre class="line after"><span class="ws">    </span># be overridden.</pre>\n<pre class="line after"><span class="ws">    </span>def dispatch(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637361936">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">502</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = getattr(self, request.method.lower(),</pre>\n<pre class="line before"><span class="ws">                                  </span>self.http_method_not_allowed)</pre>\n<pre class="line before"><span class="ws">            </span>else:</pre>\n<pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637362256">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/generics.py"</cite>,\n      line <em class="line">242</em>,\n      in <code class="function">post</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def post(self, request, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return self.create(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class RetrieveUpdateAPIView(mixins.RetrieveModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>mixins.UpdateModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>GenericAPIView):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637362448">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py"</cite>,\n      line <em class="line">19</em>,\n      in <code class="function">create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>Create a model instance.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def create(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>serializer = self.get_serializer(data=request.data)</pre>\n<pre class="line before"><span class="ws">        </span>serializer.is_valid(raise_exception=True)</pre>\n<pre class="line current"><span class="ws">        </span>self.perform_create(serializer)</pre>\n<pre class="line after"><span class="ws">        </span>headers = self.get_success_headers(serializer.data)</pre>\n<pre class="line after"><span class="ws">        </span>return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line after"><span class="ws">        </span>serializer.save()</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637361424">\n  <h4>File <cite class="filename">"/app/ultra_predictor/api_races/api.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">perform_create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])</pre>\n<pre class="line after"><span class="ws">            </span>serializer.save(event=event)</pre>\n<pre class="line after"><span class="ws">        </span>except Event.DoesNotExist:</pre>\n<pre class="line after"><span class="ws">            </span>logger.error(f&quot;Event not found: {self.request.data}&quot;)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637360272">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/manager.py"</cite>,\n      line <em class="line">82</em>,\n      in <code class="function">manager_method</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>@classmethod</pre>\n<pre class="line before"><span class="ws">    </span>def _get_queryset_methods(cls, queryset_class):</pre>\n<pre class="line before"><span class="ws">        </span>def create_method(name, method):</pre>\n<pre class="line before"><span class="ws">            </span>def manager_method(self, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">                </span>return getattr(self.get_queryset(), name)(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__name__ = method.__name__</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__doc__ = method.__doc__</pre>\n<pre class="line after"><span class="ws">            </span>return manager_method</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>new_methods = {}</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637361552">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/query.py"</cite>,\n      line <em class="line">412</em>,\n      in <code class="function">get</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>&quot;%s matching query does not exist.&quot; %</pre>\n<pre class="line before"><span class="ws">                </span>self.model._meta.object_name</pre>\n<pre class="line before"><span class="ws">            </span>)</pre>\n<pre class="line before"><span class="ws">        </span>raise self.model.MultipleObjectsReturned(</pre>\n<pre class="line before"><span class="ws">            </span>&quot;get() returned more than one %s -- it returned %s!&quot; %</pre>\n<pre class="line current"><span class="ws">            </span>(self.model._meta.object_name, num)</pre>\n<pre class="line after"><span class="ws">        </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def create(self, **kwargs):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line after"><span class="ws">        </span>Create a new object with the given kwargs, saving it to the database</pre></div>\n</div>\n</ul>\n  <blockquote>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</blockquote>\n</div>\n\n<div class="plain">\n  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">\n    <p>\n      <input type="hidden" name="language" value="pytb">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class="pastemessage">You can also paste this traceback into\n      a <a href="https://gist.github.com/">gist</a>:\n      <input type="submit" value="create paste"></span>\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py&quot;, line 65, in __call__\n    return self.application(environ, start_response)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py&quot;, line 141, in __call__\n    response = self.get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 75, in get_response\n    response = self._middleware_chain(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 36, in inner\n    response = response_for_exception(request, exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File &quot;/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py&quot;, line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/six.py&quot;, line 695, in reraise\n    raise value.with_traceback(tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 34, in inner\n    response = get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File &quot;/usr/local/lib/python3.7/contextlib.py&quot;, line 74, in inner\n    return func(*args, **kwds)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py&quot;, line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/generic/base.py&quot;, line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 505, in dispatch\n    response = self.handle_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 476, in raise_uncaught_exception\n    raise exc\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/generics.py&quot;, line 242, in post\n    return self.create(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py&quot;, line 19, in create\n    self.perform_create(serializer)\n  File &quot;/app/ultra_predictor/api_races/api.py&quot;, line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/manager.py&quot;, line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/query.py&quot;, line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</textarea>\n  </form>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py", line 65, in __call__\n    return self.application(environ, start_response)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py", line 141, in __call__\n    response = self.get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 75, in get_response\n    response = self._middleware_chain(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 36, in inner\n    response = response_for_exception(request, exc)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File "/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py", line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File "/usr/local/lib/python3.7/site-packages/six.py", line 695, in reraise\n    raise value.with_traceback(tb)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner\n    response = get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File "/usr/local/lib/python3.7/contextlib.py", line 74, in inner\n    return func(*args, **kwds)\n  File "/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/views/generic/base.py", line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 505, in dispatch\n    response = self.handle_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 476, in raise_uncaught_exception\n    raise exc\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/generics.py", line 242, in post\n    return self.create(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py", line 19, in create\n    self.perform_create(serializer)\n  File "/app/ultra_predictor/api_races/api.py", line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data["itra_event_id"])\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/manager.py", line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/query.py", line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event - it returned 2!\n\n-->\n', item: {'ascent': '3360',
 'challenge': None,
 'championship': None,
 'city_finish': 'PONFERRADA',
 'city_start': 'PONFERRADA',
 'country_finish': 'Spain',
 'country_start': 'Spain',
 'descent': '3370',
 'distance': '103.3',
 'finish_point': '310',
 'itra_event_id': 14,
 'itra_point': '4',
 'itra_race_id': 802,
 'map_link': 'https://tracedetrail.fr/en/trace/itra/46769',
 'max_time': datetime.timedelta(days=1),
 'mount_point': '4',
 'name': '101 Peregrinos',
 'participation': 'solo',
 'pistes': '60',
 'race_date': '2018-04-28',
 'race_time': '08:30:00',
 'refreshment_points': '10',
 'routes': '30',
 'sentiers': '10'}
2019-12-20 15:13:34 [root] ERROR: Error RACE:, reqb'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2! // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 140683637360976,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "J8Ix9c8yqMv8LeUqVPy3";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ultra_predictor.races.models.MultipleObjectsReturned</h1>\n<div class="detail">\n  <p class="errormsg">ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  \n  <ul><li><div class="frame" id="frame-140683637049616">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py"</cite>,\n      line <em class="line">65</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>return response_for_exception(request, e)</pre>\n<pre class="line before"><span class="ws">        </span>return super().get_response(request)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>if not self._should_handle(get_path_info(environ)):</pre>\n<pre class="line current"><span class="ws">            </span>return self.application(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>return super().__call__(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637049680">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py"</cite>,\n      line <em class="line">141</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>set_script_prefix(get_script_name(environ))</pre>\n<pre class="line before"><span class="ws">        </span>signals.request_started.send(sender=self.__class__, environ=environ)</pre>\n<pre class="line before"><span class="ws">        </span>request = self.request_class(environ)</pre>\n<pre class="line current"><span class="ws">        </span>response = self.get_response(request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response._handler_class = self.__class__</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>status = \'%d %s\' % (response.status_code, response.reason_phrase)</pre>\n<pre class="line after"><span class="ws">        </span>response_headers = [</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636564624">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">75</em>,\n      in <code class="function">get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def get_response(self, request):</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Return an HttpResponse object for the given HttpRequest.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">        </span># Setup default url resolver for this thread</pre>\n<pre class="line before"><span class="ws">        </span>set_urlconf(settings.ROOT_URLCONF)</pre>\n<pre class="line current"><span class="ws">        </span>response = self._middleware_chain(request)</pre>\n<pre class="line after"><span class="ws">        </span>response._closable_objects.append(request)</pre>\n<pre class="line after"><span class="ws">        </span>if response.status_code &gt;= 400:</pre>\n<pre class="line after"><span class="ws">            </span>log_response(</pre>\n<pre class="line after"><span class="ws">                </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">                </span>response=response,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637049744">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">36</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>def response_for_exception(request, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637049552">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">90</em>,\n      in <code class="function">response_for_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span># Allow sys.exit() to actually exit. See tickets #1023 and #4701</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>else:</pre>\n<pre class="line before"><span class="ws">        </span>signals.got_request_exception.send(sender=None, request=request)</pre>\n<pre class="line current"><span class="ws">        </span>response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())</pre>\n<pre class="line after"><span class="ws">        </span>log_response(</pre>\n<pre class="line after"><span class="ws">            </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">            </span>response=response,</pre>\n<pre class="line after"><span class="ws">            </span>request=request,</pre>\n<pre class="line after"><span class="ws">            </span>exc_info=sys.exc_info(),</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637048080">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">125</em>,\n      in <code class="function">handle_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG_PROPAGATE_EXCEPTIONS:</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG:</pre>\n<pre class="line current"><span class="ws">        </span>return debug.technical_500_response(request, *exc_info)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Return an HttpResponse that displays a friendly error message.</pre>\n<pre class="line after"><span class="ws">    </span>callback, param_dict = resolver.resolve_error_handler(500)</pre>\n<pre class="line after"><span class="ws">    </span>return callback(request, **param_dict)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637049936">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">null_technical_500_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>elif tld.wsgi_tb:</pre>\n<pre class="line before"><span class="ws">            </span>tb = tld.wsgi_tb</pre>\n<pre class="line before"><span class="ws">    </span>except AttributeError:</pre>\n<pre class="line before"><span class="ws">        </span>pass</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">    </span>six.reraise(exc_type, exc_value, tb)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636665232">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/six.py"</cite>,\n      line <em class="line">695</em>,\n      in <code class="function">reraise</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>if value is None:</pre>\n<pre class="line before"><span class="ws">                </span>value = tp()</pre>\n<pre class="line before"><span class="ws">            </span>if value.__traceback__ is not tb:</pre>\n<pre class="line current"><span class="ws">                </span>raise value.with_traceback(tb)</pre>\n<pre class="line after"><span class="ws">            </span>raise value</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre>\n<pre class="line after"><span class="ws">            </span>value = None</pre>\n<pre class="line after"><span class="ws">            </span>tb = None</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636664272">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">34</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>can rely on getting a response instead of an exception.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637050128">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">115</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre>\n<pre class="line after"><span class="ws">            </span>if isinstance(callback, types.FunctionType):    # FBV</pre>\n<pre class="line after"><span class="ws">                </span>view_name = callback.__name__</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636664144">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">113</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>break</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line current"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636665680">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/contextlib.py"</cite>,\n      line <em class="line">74</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, func):</pre>\n<pre class="line before"><span class="ws">        </span>@wraps(func)</pre>\n<pre class="line before"><span class="ws">        </span>def inner(*args, **kwds):</pre>\n<pre class="line before"><span class="ws">            </span>with self._recreate_cm():</pre>\n<pre class="line current"><span class="ws">                </span>return func(*args, **kwds)</pre>\n<pre class="line after"><span class="ws">        </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class _GeneratorContextManagerBase:</pre>\n<pre class="line after"><span class="ws">    </span>&quot;&quot;&quot;Shared functionality for @contextmanager and @asynccontextmanager.&quot;&quot;&quot;</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636665744">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py"</cite>,\n      line <em class="line">54</em>,\n      in <code class="function">wrapped_view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span>def csrf_exempt(view_func):</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span># view_func.csrf_exempt = True would also work, but decorators are nicer</pre>\n<pre class="line before"><span class="ws">    </span># if they don\'t have side effects, so return a new function.</pre>\n<pre class="line before"><span class="ws">    </span>def wrapped_view(*args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return view_func(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">    </span>wrapped_view.csrf_exempt = True</pre>\n<pre class="line after"><span class="ws">    </span>return wraps(view_func)(wrapped_view)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636665168">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/generic/base.py"</cite>,\n      line <em class="line">71</em>,\n      in <code class="function">view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>if not hasattr(self, \'request\'):</pre>\n<pre class="line before"><span class="ws">                </span>raise AttributeError(</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;%s instance has no \'request\' attribute. Did you override &quot;</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;setup() and forget to call super()?&quot; % cls.__name__</pre>\n<pre class="line before"><span class="ws">                </span>)</pre>\n<pre class="line current"><span class="ws">            </span>return self.dispatch(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>view.view_class = cls</pre>\n<pre class="line after"><span class="ws">        </span>view.view_initkwargs = initkwargs</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># take name and docstring from class</pre>\n<pre class="line after"><span class="ws">        </span>update_wrapper(view, cls, updated=())</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636665552">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">505</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>return self.response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def options(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636666256">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">465</em>,\n      in <code class="function">handle_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>context = self.get_exception_handler_context()</pre>\n<pre class="line before"><span class="ws">        </span>response = exception_handler(exc, context)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line current"><span class="ws">            </span>self.raise_uncaught_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response.exception = True</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def raise_uncaught_exception(self, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636665936">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">476</em>,\n      in <code class="function">raise_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if settings.DEBUG:</pre>\n<pre class="line before"><span class="ws">            </span>request = self.request</pre>\n<pre class="line before"><span class="ws">            </span>renderer_format = getattr(request.accepted_renderer, \'format\')</pre>\n<pre class="line before"><span class="ws">            </span>use_plaintext_traceback = renderer_format not in (\'html\', \'api\', \'admin\')</pre>\n<pre class="line before"><span class="ws">            </span>request.force_plaintext_errors(use_plaintext_traceback)</pre>\n<pre class="line current"><span class="ws">        </span>raise exc</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Note: Views are made CSRF exempt from within `as_view` as to prevent</pre>\n<pre class="line after"><span class="ws">    </span># accidental removal of this exemption in cases where `dispatch` needs to</pre>\n<pre class="line after"><span class="ws">    </span># be overridden.</pre>\n<pre class="line after"><span class="ws">    </span>def dispatch(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636664848">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">502</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = getattr(self, request.method.lower(),</pre>\n<pre class="line before"><span class="ws">                                  </span>self.http_method_not_allowed)</pre>\n<pre class="line before"><span class="ws">            </span>else:</pre>\n<pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636664912">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/generics.py"</cite>,\n      line <em class="line">242</em>,\n      in <code class="function">post</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def post(self, request, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return self.create(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class RetrieveUpdateAPIView(mixins.RetrieveModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>mixins.UpdateModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>GenericAPIView):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636664976">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py"</cite>,\n      line <em class="line">19</em>,\n      in <code class="function">create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>Create a model instance.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def create(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>serializer = self.get_serializer(data=request.data)</pre>\n<pre class="line before"><span class="ws">        </span>serializer.is_valid(raise_exception=True)</pre>\n<pre class="line current"><span class="ws">        </span>self.perform_create(serializer)</pre>\n<pre class="line after"><span class="ws">        </span>headers = self.get_success_headers(serializer.data)</pre>\n<pre class="line after"><span class="ws">        </span>return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line after"><span class="ws">        </span>serializer.save()</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636665424">\n  <h4>File <cite class="filename">"/app/ultra_predictor/api_races/api.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">perform_create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])</pre>\n<pre class="line after"><span class="ws">            </span>serializer.save(event=event)</pre>\n<pre class="line after"><span class="ws">        </span>except Event.DoesNotExist:</pre>\n<pre class="line after"><span class="ws">            </span>logger.error(f&quot;Event not found: {self.request.data}&quot;)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636665616">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/manager.py"</cite>,\n      line <em class="line">82</em>,\n      in <code class="function">manager_method</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>@classmethod</pre>\n<pre class="line before"><span class="ws">    </span>def _get_queryset_methods(cls, queryset_class):</pre>\n<pre class="line before"><span class="ws">        </span>def create_method(name, method):</pre>\n<pre class="line before"><span class="ws">            </span>def manager_method(self, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">                </span>return getattr(self.get_queryset(), name)(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__name__ = method.__name__</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__doc__ = method.__doc__</pre>\n<pre class="line after"><span class="ws">            </span>return manager_method</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>new_methods = {}</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683636666064">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/query.py"</cite>,\n      line <em class="line">412</em>,\n      in <code class="function">get</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>&quot;%s matching query does not exist.&quot; %</pre>\n<pre class="line before"><span class="ws">                </span>self.model._meta.object_name</pre>\n<pre class="line before"><span class="ws">            </span>)</pre>\n<pre class="line before"><span class="ws">        </span>raise self.model.MultipleObjectsReturned(</pre>\n<pre class="line before"><span class="ws">            </span>&quot;get() returned more than one %s -- it returned %s!&quot; %</pre>\n<pre class="line current"><span class="ws">            </span>(self.model._meta.object_name, num)</pre>\n<pre class="line after"><span class="ws">        </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def create(self, **kwargs):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line after"><span class="ws">        </span>Create a new object with the given kwargs, saving it to the database</pre></div>\n</div>\n</ul>\n  <blockquote>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</blockquote>\n</div>\n\n<div class="plain">\n  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">\n    <p>\n      <input type="hidden" name="language" value="pytb">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class="pastemessage">You can also paste this traceback into\n      a <a href="https://gist.github.com/">gist</a>:\n      <input type="submit" value="create paste"></span>\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py&quot;, line 65, in __call__\n    return self.application(environ, start_response)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py&quot;, line 141, in __call__\n    response = self.get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 75, in get_response\n    response = self._middleware_chain(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 36, in inner\n    response = response_for_exception(request, exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File &quot;/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py&quot;, line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/six.py&quot;, line 695, in reraise\n    raise value.with_traceback(tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 34, in inner\n    response = get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File &quot;/usr/local/lib/python3.7/contextlib.py&quot;, line 74, in inner\n    return func(*args, **kwds)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py&quot;, line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/generic/base.py&quot;, line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 505, in dispatch\n    response = self.handle_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 476, in raise_uncaught_exception\n    raise exc\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/generics.py&quot;, line 242, in post\n    return self.create(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py&quot;, line 19, in create\n    self.perform_create(serializer)\n  File &quot;/app/ultra_predictor/api_races/api.py&quot;, line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/manager.py&quot;, line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/query.py&quot;, line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</textarea>\n  </form>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py", line 65, in __call__\n    return self.application(environ, start_response)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py", line 141, in __call__\n    response = self.get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 75, in get_response\n    response = self._middleware_chain(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 36, in inner\n    response = response_for_exception(request, exc)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File "/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py", line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File "/usr/local/lib/python3.7/site-packages/six.py", line 695, in reraise\n    raise value.with_traceback(tb)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner\n    response = get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File "/usr/local/lib/python3.7/contextlib.py", line 74, in inner\n    return func(*args, **kwds)\n  File "/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/views/generic/base.py", line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 505, in dispatch\n    response = self.handle_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 476, in raise_uncaught_exception\n    raise exc\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/generics.py", line 242, in post\n    return self.create(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py", line 19, in create\n    self.perform_create(serializer)\n  File "/app/ultra_predictor/api_races/api.py", line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data["itra_event_id"])\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/manager.py", line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/query.py", line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event - it returned 2!\n\n-->\n', item: {'ascent': '8130',
 'challenge': None,
 'championship': None,
 'city_finish': 'Argeles',
 'city_start': 'Bolquère',
 'country_finish': 'France',
 'country_start': 'France',
 'descent': '9870',
 'distance': '172.6',
 'finish_point': '380',
 'itra_event_id': 8,
 'itra_point': '6',
 'itra_race_id': 3218,
 'map_link': 'https://tracedetrail.fr/en/trace/itra/70554',
 'max_time': datetime.timedelta(days=1, seconds=86340),
 'mount_point': '6',
 'name': '100 Miles',
 'participation': 'solo',
 'pistes': '30',
 'race_date': '2018-10-05',
 'race_time': '10:00:00',
 'refreshment_points': '15',
 'routes': '10',
 'sentiers': '60'}
2019-12-20 15:13:34 [root] ERROR: Error RACE:, reqb'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2! // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 140683636664528,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "J8Ix9c8yqMv8LeUqVPy3";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ultra_predictor.races.models.MultipleObjectsReturned</h1>\n<div class="detail">\n  <p class="errormsg">ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  \n  <ul><li><div class="frame" id="frame-140683637360208">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py"</cite>,\n      line <em class="line">65</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>return response_for_exception(request, e)</pre>\n<pre class="line before"><span class="ws">        </span>return super().get_response(request)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>if not self._should_handle(get_path_info(environ)):</pre>\n<pre class="line current"><span class="ws">            </span>return self.application(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>return super().__call__(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635838160">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py"</cite>,\n      line <em class="line">141</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>set_script_prefix(get_script_name(environ))</pre>\n<pre class="line before"><span class="ws">        </span>signals.request_started.send(sender=self.__class__, environ=environ)</pre>\n<pre class="line before"><span class="ws">        </span>request = self.request_class(environ)</pre>\n<pre class="line current"><span class="ws">        </span>response = self.get_response(request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response._handler_class = self.__class__</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>status = \'%d %s\' % (response.status_code, response.reason_phrase)</pre>\n<pre class="line after"><span class="ws">        </span>response_headers = [</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635838416">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">75</em>,\n      in <code class="function">get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def get_response(self, request):</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Return an HttpResponse object for the given HttpRequest.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">        </span># Setup default url resolver for this thread</pre>\n<pre class="line before"><span class="ws">        </span>set_urlconf(settings.ROOT_URLCONF)</pre>\n<pre class="line current"><span class="ws">        </span>response = self._middleware_chain(request)</pre>\n<pre class="line after"><span class="ws">        </span>response._closable_objects.append(request)</pre>\n<pre class="line after"><span class="ws">        </span>if response.status_code &gt;= 400:</pre>\n<pre class="line after"><span class="ws">            </span>log_response(</pre>\n<pre class="line after"><span class="ws">                </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">                </span>response=response,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635836560">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">36</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>def response_for_exception(request, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635838032">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">90</em>,\n      in <code class="function">response_for_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span># Allow sys.exit() to actually exit. See tickets #1023 and #4701</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>else:</pre>\n<pre class="line before"><span class="ws">        </span>signals.got_request_exception.send(sender=None, request=request)</pre>\n<pre class="line current"><span class="ws">        </span>response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())</pre>\n<pre class="line after"><span class="ws">        </span>log_response(</pre>\n<pre class="line after"><span class="ws">            </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">            </span>response=response,</pre>\n<pre class="line after"><span class="ws">            </span>request=request,</pre>\n<pre class="line after"><span class="ws">            </span>exc_info=sys.exc_info(),</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635838224">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">125</em>,\n      in <code class="function">handle_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG_PROPAGATE_EXCEPTIONS:</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG:</pre>\n<pre class="line current"><span class="ws">        </span>return debug.technical_500_response(request, *exc_info)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Return an HttpResponse that displays a friendly error message.</pre>\n<pre class="line after"><span class="ws">    </span>callback, param_dict = resolver.resolve_error_handler(500)</pre>\n<pre class="line after"><span class="ws">    </span>return callback(request, **param_dict)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635838608">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">null_technical_500_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>elif tld.wsgi_tb:</pre>\n<pre class="line before"><span class="ws">            </span>tb = tld.wsgi_tb</pre>\n<pre class="line before"><span class="ws">    </span>except AttributeError:</pre>\n<pre class="line before"><span class="ws">        </span>pass</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">    </span>six.reraise(exc_type, exc_value, tb)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635957392">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/six.py"</cite>,\n      line <em class="line">695</em>,\n      in <code class="function">reraise</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>if value is None:</pre>\n<pre class="line before"><span class="ws">                </span>value = tp()</pre>\n<pre class="line before"><span class="ws">            </span>if value.__traceback__ is not tb:</pre>\n<pre class="line current"><span class="ws">                </span>raise value.with_traceback(tb)</pre>\n<pre class="line after"><span class="ws">            </span>raise value</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre>\n<pre class="line after"><span class="ws">            </span>value = None</pre>\n<pre class="line after"><span class="ws">            </span>tb = None</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635956368">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">34</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>can rely on getting a response instead of an exception.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635838096">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">115</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre>\n<pre class="line after"><span class="ws">            </span>if isinstance(callback, types.FunctionType):    # FBV</pre>\n<pre class="line after"><span class="ws">                </span>view_name = callback.__name__</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635956624">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">113</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>break</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line current"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635957008">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/contextlib.py"</cite>,\n      line <em class="line">74</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, func):</pre>\n<pre class="line before"><span class="ws">        </span>@wraps(func)</pre>\n<pre class="line before"><span class="ws">        </span>def inner(*args, **kwds):</pre>\n<pre class="line before"><span class="ws">            </span>with self._recreate_cm():</pre>\n<pre class="line current"><span class="ws">                </span>return func(*args, **kwds)</pre>\n<pre class="line after"><span class="ws">        </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class _GeneratorContextManagerBase:</pre>\n<pre class="line after"><span class="ws">    </span>&quot;&quot;&quot;Shared functionality for @contextmanager and @asynccontextmanager.&quot;&quot;&quot;</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635957200">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py"</cite>,\n      line <em class="line">54</em>,\n      in <code class="function">wrapped_view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span>def csrf_exempt(view_func):</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span># view_func.csrf_exempt = True would also work, but decorators are nicer</pre>\n<pre class="line before"><span class="ws">    </span># if they don\'t have side effects, so return a new function.</pre>\n<pre class="line before"><span class="ws">    </span>def wrapped_view(*args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return view_func(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">    </span>wrapped_view.csrf_exempt = True</pre>\n<pre class="line after"><span class="ws">    </span>return wraps(view_func)(wrapped_view)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635957456">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/generic/base.py"</cite>,\n      line <em class="line">71</em>,\n      in <code class="function">view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>if not hasattr(self, \'request\'):</pre>\n<pre class="line before"><span class="ws">                </span>raise AttributeError(</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;%s instance has no \'request\' attribute. Did you override &quot;</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;setup() and forget to call super()?&quot; % cls.__name__</pre>\n<pre class="line before"><span class="ws">                </span>)</pre>\n<pre class="line current"><span class="ws">            </span>return self.dispatch(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>view.view_class = cls</pre>\n<pre class="line after"><span class="ws">        </span>view.view_initkwargs = initkwargs</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># take name and docstring from class</pre>\n<pre class="line after"><span class="ws">        </span>update_wrapper(view, cls, updated=())</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635957712">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">505</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>return self.response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def options(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635957264">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">465</em>,\n      in <code class="function">handle_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>context = self.get_exception_handler_context()</pre>\n<pre class="line before"><span class="ws">        </span>response = exception_handler(exc, context)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line current"><span class="ws">            </span>self.raise_uncaught_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response.exception = True</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def raise_uncaught_exception(self, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635956752">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">476</em>,\n      in <code class="function">raise_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if settings.DEBUG:</pre>\n<pre class="line before"><span class="ws">            </span>request = self.request</pre>\n<pre class="line before"><span class="ws">            </span>renderer_format = getattr(request.accepted_renderer, \'format\')</pre>\n<pre class="line before"><span class="ws">            </span>use_plaintext_traceback = renderer_format not in (\'html\', \'api\', \'admin\')</pre>\n<pre class="line before"><span class="ws">            </span>request.force_plaintext_errors(use_plaintext_traceback)</pre>\n<pre class="line current"><span class="ws">        </span>raise exc</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Note: Views are made CSRF exempt from within `as_view` as to prevent</pre>\n<pre class="line after"><span class="ws">    </span># accidental removal of this exemption in cases where `dispatch` needs to</pre>\n<pre class="line after"><span class="ws">    </span># be overridden.</pre>\n<pre class="line after"><span class="ws">    </span>def dispatch(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635957584">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">502</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = getattr(self, request.method.lower(),</pre>\n<pre class="line before"><span class="ws">                                  </span>self.http_method_not_allowed)</pre>\n<pre class="line before"><span class="ws">            </span>else:</pre>\n<pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635978512">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/generics.py"</cite>,\n      line <em class="line">242</em>,\n      in <code class="function">post</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def post(self, request, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return self.create(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class RetrieveUpdateAPIView(mixins.RetrieveModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>mixins.UpdateModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>GenericAPIView):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635978576">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py"</cite>,\n      line <em class="line">19</em>,\n      in <code class="function">create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>Create a model instance.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def create(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>serializer = self.get_serializer(data=request.data)</pre>\n<pre class="line before"><span class="ws">        </span>serializer.is_valid(raise_exception=True)</pre>\n<pre class="line current"><span class="ws">        </span>self.perform_create(serializer)</pre>\n<pre class="line after"><span class="ws">        </span>headers = self.get_success_headers(serializer.data)</pre>\n<pre class="line after"><span class="ws">        </span>return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line after"><span class="ws">        </span>serializer.save()</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635979536">\n  <h4>File <cite class="filename">"/app/ultra_predictor/api_races/api.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">perform_create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])</pre>\n<pre class="line after"><span class="ws">            </span>serializer.save(event=event)</pre>\n<pre class="line after"><span class="ws">        </span>except Event.DoesNotExist:</pre>\n<pre class="line after"><span class="ws">            </span>logger.error(f&quot;Event not found: {self.request.data}&quot;)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635979792">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/manager.py"</cite>,\n      line <em class="line">82</em>,\n      in <code class="function">manager_method</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>@classmethod</pre>\n<pre class="line before"><span class="ws">    </span>def _get_queryset_methods(cls, queryset_class):</pre>\n<pre class="line before"><span class="ws">        </span>def create_method(name, method):</pre>\n<pre class="line before"><span class="ws">            </span>def manager_method(self, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">                </span>return getattr(self.get_queryset(), name)(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__name__ = method.__name__</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__doc__ = method.__doc__</pre>\n<pre class="line after"><span class="ws">            </span>return manager_method</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>new_methods = {}</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635979344">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/query.py"</cite>,\n      line <em class="line">412</em>,\n      in <code class="function">get</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>&quot;%s matching query does not exist.&quot; %</pre>\n<pre class="line before"><span class="ws">                </span>self.model._meta.object_name</pre>\n<pre class="line before"><span class="ws">            </span>)</pre>\n<pre class="line before"><span class="ws">        </span>raise self.model.MultipleObjectsReturned(</pre>\n<pre class="line before"><span class="ws">            </span>&quot;get() returned more than one %s -- it returned %s!&quot; %</pre>\n<pre class="line current"><span class="ws">            </span>(self.model._meta.object_name, num)</pre>\n<pre class="line after"><span class="ws">        </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def create(self, **kwargs):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line after"><span class="ws">        </span>Create a new object with the given kwargs, saving it to the database</pre></div>\n</div>\n</ul>\n  <blockquote>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</blockquote>\n</div>\n\n<div class="plain">\n  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">\n    <p>\n      <input type="hidden" name="language" value="pytb">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class="pastemessage">You can also paste this traceback into\n      a <a href="https://gist.github.com/">gist</a>:\n      <input type="submit" value="create paste"></span>\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py&quot;, line 65, in __call__\n    return self.application(environ, start_response)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py&quot;, line 141, in __call__\n    response = self.get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 75, in get_response\n    response = self._middleware_chain(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 36, in inner\n    response = response_for_exception(request, exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File &quot;/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py&quot;, line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/six.py&quot;, line 695, in reraise\n    raise value.with_traceback(tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 34, in inner\n    response = get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File &quot;/usr/local/lib/python3.7/contextlib.py&quot;, line 74, in inner\n    return func(*args, **kwds)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py&quot;, line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/generic/base.py&quot;, line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 505, in dispatch\n    response = self.handle_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 476, in raise_uncaught_exception\n    raise exc\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/generics.py&quot;, line 242, in post\n    return self.create(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py&quot;, line 19, in create\n    self.perform_create(serializer)\n  File &quot;/app/ultra_predictor/api_races/api.py&quot;, line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/manager.py&quot;, line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/query.py&quot;, line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</textarea>\n  </form>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py", line 65, in __call__\n    return self.application(environ, start_response)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py", line 141, in __call__\n    response = self.get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 75, in get_response\n    response = self._middleware_chain(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 36, in inner\n    response = response_for_exception(request, exc)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File "/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py", line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File "/usr/local/lib/python3.7/site-packages/six.py", line 695, in reraise\n    raise value.with_traceback(tb)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner\n    response = get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File "/usr/local/lib/python3.7/contextlib.py", line 74, in inner\n    return func(*args, **kwds)\n  File "/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/views/generic/base.py", line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 505, in dispatch\n    response = self.handle_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 476, in raise_uncaught_exception\n    raise exc\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/generics.py", line 242, in post\n    return self.create(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py", line 19, in create\n    self.perform_create(serializer)\n  File "/app/ultra_predictor/api_races/api.py", line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data["itra_event_id"])\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/manager.py", line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/query.py", line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event - it returned 2!\n\n-->\n', item: {'ascent': '2400',
 'challenge': None,
 'championship': None,
 'city_finish': 'Tafi del Valle, Tucuman, Argentina',
 'city_start': 'Yerba Buena, Tucuman, Argentina',
 'country_finish': 'Argentina',
 'country_start': 'Argentina',
 'descent': '1320',
 'distance': '43',
 'finish_point': '240',
 'itra_event_id': 15,
 'itra_point': '3',
 'itra_race_id': 947,
 'map_link': 'https://tracedetrail.fr/en/trace/itra/41096',
 'max_time': datetime.timedelta(seconds=43200),
 'mount_point': '8',
 'name': '50K',
 'participation': 'solo',
 'pistes': '6',
 'race_date': '2018-05-26',
 'race_time': '09:00:00',
 'refreshment_points': None,
 'routes': '3',
 'sentiers': '91'}
2019-12-20 15:13:35 [root] ERROR: Error RACE:, reqb'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2! // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not by accident trigger a request to /favicon.ico which might\n         change the application state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 140683637625360,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "J8Ix9c8yqMv8LeUqVPy3";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>ultra_predictor.races.models.MultipleObjectsReturned</h1>\n<div class="detail">\n  <p class="errormsg">ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  \n  <ul><li><div class="frame" id="frame-140683637625232">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py"</cite>,\n      line <em class="line">65</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>return response_for_exception(request, e)</pre>\n<pre class="line before"><span class="ws">        </span>return super().get_response(request)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>if not self._should_handle(get_path_info(environ)):</pre>\n<pre class="line current"><span class="ws">            </span>return self.application(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>return super().__call__(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683635856848">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py"</cite>,\n      line <em class="line">141</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>\n<pre class="line before"><span class="ws">        </span>set_script_prefix(get_script_name(environ))</pre>\n<pre class="line before"><span class="ws">        </span>signals.request_started.send(sender=self.__class__, environ=environ)</pre>\n<pre class="line before"><span class="ws">        </span>request = self.request_class(environ)</pre>\n<pre class="line current"><span class="ws">        </span>response = self.get_response(request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response._handler_class = self.__class__</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>status = \'%d %s\' % (response.status_code, response.reason_phrase)</pre>\n<pre class="line after"><span class="ws">        </span>response_headers = [</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683638419408">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">75</em>,\n      in <code class="function">get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def get_response(self, request):</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Return an HttpResponse object for the given HttpRequest.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">        </span># Setup default url resolver for this thread</pre>\n<pre class="line before"><span class="ws">        </span>set_urlconf(settings.ROOT_URLCONF)</pre>\n<pre class="line current"><span class="ws">        </span>response = self._middleware_chain(request)</pre>\n<pre class="line after"><span class="ws">        </span>response._closable_objects.append(request)</pre>\n<pre class="line after"><span class="ws">        </span>if response.status_code &gt;= 400:</pre>\n<pre class="line after"><span class="ws">            </span>log_response(</pre>\n<pre class="line after"><span class="ws">                </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">                </span>response=response,</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637611536">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">36</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>def response_for_exception(request, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637610832">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">90</em>,\n      in <code class="function">response_for_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span># Allow sys.exit() to actually exit. See tickets #1023 and #4701</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>else:</pre>\n<pre class="line before"><span class="ws">        </span>signals.got_request_exception.send(sender=None, request=request)</pre>\n<pre class="line current"><span class="ws">        </span>response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())</pre>\n<pre class="line after"><span class="ws">        </span>log_response(</pre>\n<pre class="line after"><span class="ws">            </span>\'%s: %s\', response.reason_phrase, request.path,</pre>\n<pre class="line after"><span class="ws">            </span>response=response,</pre>\n<pre class="line after"><span class="ws">            </span>request=request,</pre>\n<pre class="line after"><span class="ws">            </span>exc_info=sys.exc_info(),</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637612240">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">125</em>,\n      in <code class="function">handle_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG_PROPAGATE_EXCEPTIONS:</pre>\n<pre class="line before"><span class="ws">        </span>raise</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>if settings.DEBUG:</pre>\n<pre class="line current"><span class="ws">        </span>return debug.technical_500_response(request, *exc_info)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Return an HttpResponse that displays a friendly error message.</pre>\n<pre class="line after"><span class="ws">    </span>callback, param_dict = resolver.resolve_error_handler(500)</pre>\n<pre class="line after"><span class="ws">    </span>return callback(request, **param_dict)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637611216">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">null_technical_500_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>elif tld.wsgi_tb:</pre>\n<pre class="line before"><span class="ws">            </span>tb = tld.wsgi_tb</pre>\n<pre class="line before"><span class="ws">    </span>except AttributeError:</pre>\n<pre class="line before"><span class="ws">        </span>pass</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">    </span>six.reraise(exc_type, exc_value, tb)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637611408">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/six.py"</cite>,\n      line <em class="line">695</em>,\n      in <code class="function">reraise</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>if value is None:</pre>\n<pre class="line before"><span class="ws">                </span>value = tp()</pre>\n<pre class="line before"><span class="ws">            </span>if value.__traceback__ is not tb:</pre>\n<pre class="line current"><span class="ws">                </span>raise value.with_traceback(tb)</pre>\n<pre class="line after"><span class="ws">            </span>raise value</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre>\n<pre class="line after"><span class="ws">            </span>value = None</pre>\n<pre class="line after"><span class="ws">            </span>tb = None</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637611472">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py"</cite>,\n      line <em class="line">34</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>can rely on getting a response instead of an exception.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>@wraps(get_response)</pre>\n<pre class="line before"><span class="ws">    </span>def inner(request):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>response = get_response(request)</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = response_for_exception(request, exc)</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws">    </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637611280">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">115</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre>\n<pre class="line after"><span class="ws">            </span>if isinstance(callback, types.FunctionType):    # FBV</pre>\n<pre class="line after"><span class="ws">                </span>view_name = callback.__name__</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637612176">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py"</cite>,\n      line <em class="line">113</em>,\n      in <code class="function">_get_response</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>break</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line before"><span class="ws">            </span>wrapped_callback = self.make_view_atomic(callback)</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line current"><span class="ws">                </span>response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>response = self.process_exception_by_middleware(e, request)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># Complain if the view returned None (a common error).</pre>\n<pre class="line after"><span class="ws">        </span>if response is None:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637610896">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/contextlib.py"</cite>,\n      line <em class="line">74</em>,\n      in <code class="function">inner</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def __call__(self, func):</pre>\n<pre class="line before"><span class="ws">        </span>@wraps(func)</pre>\n<pre class="line before"><span class="ws">        </span>def inner(*args, **kwds):</pre>\n<pre class="line before"><span class="ws">            </span>with self._recreate_cm():</pre>\n<pre class="line current"><span class="ws">                </span>return func(*args, **kwds)</pre>\n<pre class="line after"><span class="ws">        </span>return inner</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class _GeneratorContextManagerBase:</pre>\n<pre class="line after"><span class="ws">    </span>&quot;&quot;&quot;Shared functionality for @contextmanager and @asynccontextmanager.&quot;&quot;&quot;</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637611088">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py"</cite>,\n      line <em class="line">54</em>,\n      in <code class="function">wrapped_view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span>def csrf_exempt(view_func):</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span># view_func.csrf_exempt = True would also work, but decorators are nicer</pre>\n<pre class="line before"><span class="ws">    </span># if they don\'t have side effects, so return a new function.</pre>\n<pre class="line before"><span class="ws">    </span>def wrapped_view(*args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return view_func(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">    </span>wrapped_view.csrf_exempt = True</pre>\n<pre class="line after"><span class="ws">    </span>return wraps(view_func)(wrapped_view)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637610064">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/views/generic/base.py"</cite>,\n      line <em class="line">71</em>,\n      in <code class="function">view</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">            </span>if not hasattr(self, \'request\'):</pre>\n<pre class="line before"><span class="ws">                </span>raise AttributeError(</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;%s instance has no \'request\' attribute. Did you override &quot;</pre>\n<pre class="line before"><span class="ws">                    </span>&quot;setup() and forget to call super()?&quot; % cls.__name__</pre>\n<pre class="line before"><span class="ws">                </span>)</pre>\n<pre class="line current"><span class="ws">            </span>return self.dispatch(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>view.view_class = cls</pre>\n<pre class="line after"><span class="ws">        </span>view.view_initkwargs = initkwargs</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span># take name and docstring from class</pre>\n<pre class="line after"><span class="ws">        </span>update_wrapper(view, cls, updated=())</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637610640">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">505</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line current"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws">        </span>return self.response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def options(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637611920">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">465</em>,\n      in <code class="function">handle_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>context = self.get_exception_handler_context()</pre>\n<pre class="line before"><span class="ws">        </span>response = exception_handler(exc, context)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if response is None:</pre>\n<pre class="line current"><span class="ws">            </span>self.raise_uncaught_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>response.exception = True</pre>\n<pre class="line after"><span class="ws">        </span>return response</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def raise_uncaught_exception(self, exc):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637611984">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">476</em>,\n      in <code class="function">raise_uncaught_exception</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">        </span>if settings.DEBUG:</pre>\n<pre class="line before"><span class="ws">            </span>request = self.request</pre>\n<pre class="line before"><span class="ws">            </span>renderer_format = getattr(request.accepted_renderer, \'format\')</pre>\n<pre class="line before"><span class="ws">            </span>use_plaintext_traceback = renderer_format not in (\'html\', \'api\', \'admin\')</pre>\n<pre class="line before"><span class="ws">            </span>request.force_plaintext_errors(use_plaintext_traceback)</pre>\n<pre class="line current"><span class="ws">        </span>raise exc</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span># Note: Views are made CSRF exempt from within `as_view` as to prevent</pre>\n<pre class="line after"><span class="ws">    </span># accidental removal of this exemption in cases where `dispatch` needs to</pre>\n<pre class="line after"><span class="ws">    </span># be overridden.</pre>\n<pre class="line after"><span class="ws">    </span>def dispatch(self, request, *args, **kwargs):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637610256">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/views.py"</cite>,\n      line <em class="line">502</em>,\n      in <code class="function">dispatch</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>handler = getattr(self, request.method.lower(),</pre>\n<pre class="line before"><span class="ws">                                  </span>self.http_method_not_allowed)</pre>\n<pre class="line before"><span class="ws">            </span>else:</pre>\n<pre class="line before"><span class="ws">                </span>handler = self.http_method_not_allowed</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">            </span>response = handler(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>except Exception as exc:</pre>\n<pre class="line after"><span class="ws">            </span>response = self.handle_exception(exc)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>self.response = self.finalize_response(request, response, *args, **kwargs)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637612432">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/generics.py"</cite>,\n      line <em class="line">242</em>,\n      in <code class="function">post</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def post(self, request, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">        </span>return self.create(request, *args, **kwargs)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws"></span>class RetrieveUpdateAPIView(mixins.RetrieveModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>mixins.UpdateModelMixin,</pre>\n<pre class="line after"><span class="ws">                            </span>GenericAPIView):</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637610768">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py"</cite>,\n      line <em class="line">19</em>,\n      in <code class="function">create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>Create a model instance.</pre>\n<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>\n<pre class="line before"><span class="ws">    </span>def create(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>serializer = self.get_serializer(data=request.data)</pre>\n<pre class="line before"><span class="ws">        </span>serializer.is_valid(raise_exception=True)</pre>\n<pre class="line current"><span class="ws">        </span>self.perform_create(serializer)</pre>\n<pre class="line after"><span class="ws">        </span>headers = self.get_success_headers(serializer.data)</pre>\n<pre class="line after"><span class="ws">        </span>return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line after"><span class="ws">        </span>serializer.save()</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637610576">\n  <h4>File <cite class="filename">"/app/ultra_predictor/api_races/api.py"</cite>,\n      line <em class="line">37</em>,\n      in <code class="function">perform_create</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">    </span>def get(self, request, *args, **kwargs):</pre>\n<pre class="line before"><span class="ws">        </span>return self.list(request, *args, **kwargs)</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>def perform_create(self, serializer):</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line current"><span class="ws">            </span>event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])</pre>\n<pre class="line after"><span class="ws">            </span>serializer.save(event=event)</pre>\n<pre class="line after"><span class="ws">        </span>except Event.DoesNotExist:</pre>\n<pre class="line after"><span class="ws">            </span>logger.error(f&quot;Event not found: {self.request.data}&quot;)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637610960">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/manager.py"</cite>,\n      line <em class="line">82</em>,\n      in <code class="function">manager_method</code></h4>\n  <div class="source"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">    </span>@classmethod</pre>\n<pre class="line before"><span class="ws">    </span>def _get_queryset_methods(cls, queryset_class):</pre>\n<pre class="line before"><span class="ws">        </span>def create_method(name, method):</pre>\n<pre class="line before"><span class="ws">            </span>def manager_method(self, *args, **kwargs):</pre>\n<pre class="line current"><span class="ws">                </span>return getattr(self.get_queryset(), name)(*args, **kwargs)</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__name__ = method.__name__</pre>\n<pre class="line after"><span class="ws">            </span>manager_method.__doc__ = method.__doc__</pre>\n<pre class="line after"><span class="ws">            </span>return manager_method</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>new_methods = {}</pre></div>\n</div>\n\n<li><div class="frame" id="frame-140683637609680">\n  <h4>File <cite class="filename">"/usr/local/lib/python3.7/site-packages/django/db/models/query.py"</cite>,\n      line <em class="line">412</em>,\n      in <code class="function">get</code></h4>\n  <div class="source"><pre class="line before"><span class="ws">                </span>&quot;%s matching query does not exist.&quot; %</pre>\n<pre class="line before"><span class="ws">                </span>self.model._meta.object_name</pre>\n<pre class="line before"><span class="ws">            </span>)</pre>\n<pre class="line before"><span class="ws">        </span>raise self.model.MultipleObjectsReturned(</pre>\n<pre class="line before"><span class="ws">            </span>&quot;get() returned more than one %s -- it returned %s!&quot; %</pre>\n<pre class="line current"><span class="ws">            </span>(self.model._meta.object_name, num)</pre>\n<pre class="line after"><span class="ws">        </span>)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def create(self, **kwargs):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line after"><span class="ws">        </span>Create a new object with the given kwargs, saving it to the database</pre></div>\n</div>\n</ul>\n  <blockquote>ultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</blockquote>\n</div>\n\n<div class="plain">\n  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">\n    <p>\n      <input type="hidden" name="language" value="pytb">\n      This is the Copy/Paste friendly version of the traceback.  <span\n      class="pastemessage">You can also paste this traceback into\n      a <a href="https://gist.github.com/">gist</a>:\n      <input type="submit" value="create paste"></span>\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py&quot;, line 65, in __call__\n    return self.application(environ, start_response)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py&quot;, line 141, in __call__\n    response = self.get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 75, in get_response\n    response = self._middleware_chain(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 36, in inner\n    response = response_for_exception(request, exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File &quot;/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py&quot;, line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/six.py&quot;, line 695, in reraise\n    raise value.with_traceback(tb)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py&quot;, line 34, in inner\n    response = get_response(request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py&quot;, line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File &quot;/usr/local/lib/python3.7/contextlib.py&quot;, line 74, in inner\n    return func(*args, **kwds)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py&quot;, line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/views/generic/base.py&quot;, line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 505, in dispatch\n    response = self.handle_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 476, in raise_uncaught_exception\n    raise exc\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/views.py&quot;, line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/generics.py&quot;, line 242, in post\n    return self.create(request, *args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py&quot;, line 19, in create\n    self.perform_create(serializer)\n  File &quot;/app/ultra_predictor/api_races/api.py&quot;, line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data[&quot;itra_event_id&quot;])\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/manager.py&quot;, line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File &quot;/usr/local/lib/python3.7/site-packages/django/db/models/query.py&quot;, line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event -- it returned 2!</textarea>\n  </form>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "/usr/local/lib/python3.7/site-packages/django/contrib/staticfiles/handlers.py", line 65, in __call__\n    return self.application(environ, start_response)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/wsgi.py", line 141, in __call__\n    response = self.get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 75, in get_response\n    response = self._middleware_chain(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 36, in inner\n    response = response_for_exception(request, exc)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 90, in response_for_exception\n    response = handle_uncaught_exception(request, get_resolver(get_urlconf()), sys.exc_info())\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 125, in handle_uncaught_exception\n    return debug.technical_500_response(request, *exc_info)\n  File "/usr/local/lib/python3.7/site-packages/django_extensions/management/technical_response.py", line 37, in null_technical_500_response\n    six.reraise(exc_type, exc_value, tb)\n  File "/usr/local/lib/python3.7/site-packages/six.py", line 695, in reraise\n    raise value.with_traceback(tb)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/exception.py", line 34, in inner\n    response = get_response(request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 115, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File "/usr/local/lib/python3.7/site-packages/django/core/handlers/base.py", line 113, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File "/usr/local/lib/python3.7/contextlib.py", line 74, in inner\n    return func(*args, **kwds)\n  File "/usr/local/lib/python3.7/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view\n    return view_func(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/views/generic/base.py", line 71, in view\n    return self.dispatch(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 505, in dispatch\n    response = self.handle_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 465, in handle_exception\n    self.raise_uncaught_exception(exc)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 476, in raise_uncaught_exception\n    raise exc\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/views.py", line 502, in dispatch\n    response = handler(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/generics.py", line 242, in post\n    return self.create(request, *args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/rest_framework/mixins.py", line 19, in create\n    self.perform_create(serializer)\n  File "/app/ultra_predictor/api_races/api.py", line 37, in perform_create\n    event = Event.objects.get(itra_id=self.request.data["itra_event_id"])\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/manager.py", line 82, in manager_method\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\n  File "/usr/local/lib/python3.7/site-packages/django/db/models/query.py", line 412, in get\n    (self.model._meta.object_name, num)\nultra_predictor.races.models.Event.MultipleObjectsReturned: get() returned more than one Event - it returned 2!\n\n-->\n', item: {'ascent': '3310',
 'challenge': None,
 'championship': None,
 'city_finish': 'Tafi del Valle, Tucuman, Argentina',
 'city_start': 'Yerba Buena, Tucuman, Argentina',
 'country_finish': 'Argentina',
 'country_start': 'Argentina',
 'descent': '1890',
 'distance': '70',
 'finish_point': '240',
 'itra_event_id': 15,
 'itra_point': '4',
 'itra_race_id': 1848,
 'map_link': 'https://tracedetrail.fr/en/trace/itra/41095',
 'max_time': datetime.timedelta(seconds=75600),
 'mount_point': '6',
 'name': '80K',
 'participation': 'solo',
 'pistes': '8',
 'race_date': '2018-05-26',
 'race_time': '05:00:00',
 'refreshment_points': None,
 'routes': '5',
 'sentiers': '87'}
